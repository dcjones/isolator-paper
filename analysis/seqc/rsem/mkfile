
<../../mkconfig

gene_results= \
       ILM_BGI_A.genes.results \
       ILM_BGI_B.genes.results \
       ILM_BGI_C.genes.results \
       ILM_BGI_D.genes.results \
       ILM_MAY_A.genes.results \
       ILM_MAY_B.genes.results

isoform_results= \
       ILM_BGI_A.isoforms.results \
       ILM_BGI_B.isoforms.results \
       ILM_BGI_C.isoforms.results \
       ILM_BGI_D.isoforms.results \
       ILM_MAY_A.isoforms.results \
       ILM_MAY_B.isoforms.results

batch_effect_gene_results= \
    ILM_AGR_A_1_2_1.genes.results \
    ILM_BGI_A_1_2_1.genes.results \
    ILM_CNL_A_1_2_1.genes.results \
    ILM_MAY_A_1_2_1.genes.results \
    ILM_NVS_A_1_2_1.genes.results \
    ILM_AGR_A_2_2_1.genes.results \
    ILM_BGI_A_2_2_1.genes.results \
    ILM_CNL_A_2_2_1.genes.results \
    ILM_MAY_A_2_2_1.genes.results \
    ILM_NVS_A_2_2_1.genes.results


batch_effect_isoform_results= \
    ILM_AGR_A_1_2_1.isoforms.results \
    ILM_BGI_A_1_2_1.isoforms.results \
    ILM_CNL_A_1_2_1.isoforms.results \
    ILM_MAY_A_1_2_1.isoforms.results \
    ILM_NVS_A_1_2_1.isoforms.results \
    ILM_AGR_A_2_2_1.isoforms.results \
    ILM_BGI_A_2_2_1.isoforms.results \
    ILM_CNL_A_2_2_1.isoforms.results \
    ILM_MAY_A_2_2_1.isoforms.results \
    ILM_NVS_A_2_2_1.isoforms.results

results:V: $gene_results
all:V: $gene_results $batch_effect_gene_results

# Remove anything that doesn't have a transcript_id, since rsem chokes
# on that stuff.
ref.gtf: $human_genes
    grep transcript_id $prereq > $target


ref.1.bt2: $human_genome ref.gtf
    $rsem_prepare_reference \
        --bowtie2 \
        --bowtie2-path $bowtie2path \
        --gtf ref.gtf \
        $human_genome \
        ref

%.genes.results:X: ../%.transcriptome.bam
    $time -f "$TIMEFMT" -o $stem.time.log -- \
    $rsem_calculate_expression \
        --bam \
        --paired-end \
        --num-threads 8 \
        --calc-pme \
        --no-bam-output \
        $prereq ref $stem

gene-expression-ml.tsv:S$julia: $gene_results
    using DataFrames

    joined = nothing
    for filename in split("$gene_results")
        sample = symbol(replace(filename, ".genes.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(gene_id=ex[:gene_id])
        df[sample] = ex[:TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:gene_id)
        end
    end

    writetable("$target", joined, separator='\t')


gene-expression-pm.tsv:S$julia: $gene_results
    using DataFrames

    joined = nothing
    for filename in split("$gene_results")
        sample = symbol(replace(filename, ".genes.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(gene_id=ex[:gene_id])
        df[sample] = ex[:pme_TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:gene_id)
        end
    end

    writetable("$target", joined, separator='\t')


transcript-expression-ml.tsv:S$julia: $gene_results
    using DataFrames

    joined = nothing
    for filename in split("$isoform_results")
        sample = symbol(replace(filename, ".isoforms.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(transcript_id=ex[:transcript_id])
        df[sample] = ex[:TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:transcript_id)
        end
    end

    writetable("$target", joined, separator='\t')


transcript-expression-pm.tsv:S$julia: $gene_results
    using DataFrames

    joined = nothing
    for filename in split("$isoform_results")
        sample = symbol(replace(filename, ".isoforms.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(transcript_id=ex[:transcript_id])
        df[sample] = ex[:pme_TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:transcript_id)
        end
    end

    writetable("$target", joined, separator='\t')


batch-effect-transcript-expression-pm.tsv:S$julia: $batch_effect_gene_results
    using DataFrames

    joined = nothing
    for filename in split("$batch_effect_isoform_results")
        sample = symbol(replace(filename, ".isoforms.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(transcript_id=ex[:transcript_id])
        df[sample] = ex[:pme_TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:transcript_id)
        end
    end

    writetable("$target", joined, separator='\t')


batch-effect-transcript-expression-ml.tsv:S$julia: $batch_effect_gene_results
    using DataFrames

    joined = nothing
    for filename in split("$batch_effect_isoform_results")
        sample = symbol(replace(filename, ".isoforms.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(transcript_id=ex[:transcript_id])
        df[sample] = ex[:TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:transcript_id)
        end
    end

    writetable("$target", joined, separator='\t')

