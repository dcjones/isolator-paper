
<../../mkconfig

thetaMeans=\
       ILM_BGI_A_1_1_1.thetaMeans \
       ILM_BGI_A_2_1_1.thetaMeans \
       ILM_BGI_A_3_1_1.thetaMeans \
       ILM_BGI_A_4_1_1.thetaMeans \
       ILM_BGI_A_5_1_1.thetaMeans \
       ILM_BGI_B_1_1_1.thetaMeans \
       ILM_BGI_B_2_1_1.thetaMeans \
       ILM_BGI_B_3_1_1.thetaMeans \
       ILM_BGI_B_4_1_1.thetaMeans \
       ILM_BGI_B_5_1_1.thetaMeans \
       ILM_BGI_C_1_1_1.thetaMeans \
       ILM_BGI_C_2_1_1.thetaMeans \
       ILM_BGI_C_3_1_1.thetaMeans \
       ILM_BGI_C_4_1_1.thetaMeans \
       ILM_BGI_C_5_1_1.thetaMeans \
       ILM_BGI_D_1_1_1.thetaMeans \
       ILM_BGI_D_2_1_1.thetaMeans \
       ILM_BGI_D_3_1_1.thetaMeans \
       ILM_BGI_D_4_1_1.thetaMeans \
       ILM_BGI_D_5_1_1.thetaMeans

%.prob:X: ../../data/Homo_sapiens.GRCh38.76.ERCC.fa ../%.transcriptome.bam
    $time -f "$TIMEFMT" -o $stem.parseAlignment.time.log -- \
    $bitseq_parsealignment \
        -f BAM \
        -o $stem.prob \
        -s  ../../data/Homo_sapiens.GRCh38.76.ERCC.fa \
        -t $stem.tr \
        --verbose \
        ../$stem.transcriptome.bam


%.thetaMeans:X: %.prob
    $time -f "$TIMEFMT" -o $stem.estimateExpression.time.log -- \
    $bitseq_estimateexpression \
        --outType theta \
        -p parameters1.txt \
        -t $stem.tr \
        -o $stem \
        $stem.prob


%.rpkm:X: %.theteMeans
    $bitseq_convertsamples -a T2R -o $target -t $stem.tr $prpreq


gene_id_transcript_id.tsv: $human_genes
    mkfifo gene_ids.fifo
    grep gene_id $human_genes \
        | grep transcript_id \
        | grep -Po "gene_id \"[^\"]*\"" \
        | sed 's/gene_id //' \
        | sed 's/\"//g'> gene_ids.fifo &

    mkfifo transcript_ids.fifo
    grep gene_id $human_genes \
        | grep transcript_id \
        | grep -Po "transcript_id \"[^\"]*\"" \
        | sed 's/transcript_id //' \
        | sed 's/\"//g'> transcript_ids.fifo &

    paste gene_ids.fifo transcript_ids.fifo | sort -u > $target
    rm gene_ids.fifo transcript_ids.fifo



gene-expression.tsv:Sjulia: gene_id_transcript_id.tsv $thetaMeans
    using DataFrames, DataStructures

    gene_id_transcript_id = Dict()
    for line in eachline(open("gene_id_transcript_id.tsv"))
        (gene_id, transcript_id) = split(strip(line))
        gene_id_transcript_id[transcript_id] = gene_id
    end

    joined = nothing
    for filename in split("$thetaMeans")
        sample = replace(filename, ".thetaMeans", "")
        tbl = readtable(filename, separator=' ', header=false, allowcomments=true)
        tr = readtable(replace(filename, "thetaMeans", "tr"), separator=' ',
                       header=false, allowcomments=true)

        transcript_ids = tr[:x2]
        effective_length = tr[:x4]
        transcript_expression = tbl[:x2] ./ effective_length

        gene_expression = DefaultDict(() -> 0.0)
        for (transcript_id, expression) in zip(transcript_ids, transcript_expression)
            gene_id = gene_id_transcript_id[transcript_id]
            gene_expression[gene_id] += expression
        end

        df = DataFrame(gene_id = collect(String, keys(gene_expression)))
        df[symbol(sample)] = collect(Float64, values(gene_expression))

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:gene_id)
        end
    end

    writetable("$target", joined, separator='\t')


