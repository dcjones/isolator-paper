
<../mkconfig

align:V: ILM_BGI_A_1_1_1.bam \
         ILM_BGI_A_2_1_1.bam \
         ILM_BGI_A_3_1_1.bam \
         ILM_BGI_A_4_1_1.bam \
         ILM_BGI_A_5_1_1.bam \
         ILM_BGI_B_1_1_1.bam \
         ILM_BGI_B_2_1_1.bam \
         ILM_BGI_B_3_1_1.bam \
         ILM_BGI_B_4_1_1.bam \
         ILM_BGI_B_5_1_1.bam \
         ILM_BGI_C_1_1_1.bam \
         ILM_BGI_C_2_1_1.bam \
         ILM_BGI_C_3_1_1.bam \
         ILM_BGI_C_4_1_1.bam \
         ILM_BGI_C_5_1_1.bam \
         ILM_BGI_D_1_1_1.bam \
         ILM_BGI_D_2_1_1.bam \
         ILM_BGI_D_3_1_1.bam \
         ILM_BGI_D_4_1_1.bam \
         ILM_BGI_D_5_1_1.bam


qc_samples:V: ILM_MAY_A_1_2_1.bam \
              ILM_NVS_A_1_2_1.bam \
              ILM_AGR_A_1_2_1.bam \
              ILM_BGI_A_1_2_1.bam \
              ILM_CNL_A_1_2_1.bam \
              ILM_MAY_A_2_2_1.bam \
              ILM_NVS_A_2_2_1.bam \
              ILM_AGR_A_2_2_1.bam \
              ILM_BGI_A_2_2_1.bam \
              ILM_CNL_A_2_2_1.bam

# Excluding the COH and NYG for now because they seem to have done single-end
# sequencing
#              ILM_NYG_A_1_2_1.bam \
#              ILM_COH_A_1_2_1.bam \


%_id_whitelist.txt:S$julia: $human_genes
    id_pat = r"${stem}_id\s+\"([^\"]*)\""
    chrom_pat = r"^(\d+|X|Y|MT)\Z"
    whitelist = Set()
    for line in eachline(open("$prereq"))
        if line[1] == '#'
            continue
        end

        row = split(line, '\t')
        if match(chrom_pat, row[1]) === nothing
            continue
        end

        m = match(id_pat, row[9])
        if m === nothing
            continue
        end

        push!(whitelist, m.captures[1])
    end

    out = open("$target", "w")
    for id in whitelist
        println(out, id)
    end



# ERCC spike-in references and documentation
ERCC92.fa:
    wget http://tools.invitrogen.com/downloads/ERCC92.fa

ERCC92.gtf:
    wget http://tools.invitrogen.com/downloads/ERCC92.gtf

ERCC_Controls_Analysis.txt:
    wget http://tools.invitrogen.com/downloads/ERCC_Controls_Analysis.txt

ERCC-tlens.tsv: ERCC92.gtf
    cut -f1,5 $prereq > $target

ERCC-A-control.tsv:S$julia: ERCC_Controls_Analysis.txt
    using DataFrames
    ercc = readtable("$prereq", header=true, separator='\t')
    ercc = ercc[[:ERCC_ID, :concentration_in_Mix_1_attomoles_ul_]]
    names!(ercc, [:gene_id, :control])

    tlens = readtable("ERCC-tlens.tsv", header=false)
    names!(tlens, [:gene_id, :tlen])
    ercc = join(ercc, tlens, on=:gene_id)

    writetable("$target", ercc)

ERCC-B-control.tsv:S$julia: ERCC_Controls_Analysis.txt
    using DataFrames
    ercc = readtable("$prereq", header=true, separator='\t')
    ercc = ercc[[:ERCC_ID, :concentration_in_Mix_2_attomoles_ul_]]
    names!(ercc, [:gene_id, :control])

    tlens = readtable("ERCC-tlens.tsv", header=false)
    names!(tlens, [:gene_id, :tlen])
    ercc = join(ercc, tlens, on=:gene_id)

    writetable("$target", ercc)

ERCC-C-control.tsv:S$julia: ERCC_Controls_Analysis.txt
    using DataFrames
    ercc = readtable("$prereq", header=true, separator='\t')
    control = 0.75 .* ercc[:concentration_in_Mix_1_attomoles_ul_] .+
              0.25 .* ercc[:concentration_in_Mix_2_attomoles_ul_]
    ercc = DataFrame(gene_id=ercc[:ERCC_ID], control=control)

    tlens = readtable("ERCC-tlens.tsv", header=false)
    names!(tlens, [:gene_id, :tlen])
    ercc = join(ercc, tlens, on=:gene_id)

    writetable("$target", ercc)

ERCC-D-control.tsv:S$julia: ERCC_Controls_Analysis.txt
    using DataFrames
    ercc = readtable("$prereq", header=true, separator='\t')
    control = 0.25 .* ercc[:concentration_in_Mix_1_attomoles_ul_] .+
              0.75 .* ercc[:concentration_in_Mix_2_attomoles_ul_]
    ercc = DataFrame(gene_id=ercc[:ERCC_ID], control=control)

    tlens = readtable("ERCC-tlens.tsv", header=false)
    names!(tlens, [:gene_id, :tlen])
    ercc = join(ercc, tlens, on=:gene_id)

    writetable("$target", ercc)

ERCC:V: ERCC-A.tsv ERCC-B.tsv \
        ERCC-C.tsv ERCC-D.tsv

# Obtain, decompress, recompress, and align samples from SEQC dataset.

# Naming scehme for these files:
#
#    [PLATFORM]_[ORIGIN]_[SAMPLE]_[REPLICATE]_[FLOWCELL]_[FLOWCELL LANE]_[MATE]
#

([A-Z]{3})_([A-Z]{3})_([A-F])_(\d)_(\d+)_(\d+).sra:XRS$julia: seqc_samples.tsv
    samples = readdlm("$prereq", '\t')
    target = "$target"

    # Assign a numerical index to flowcells
    prefix = "SEQC_${stem1}_${stem2}_${stem3}_${stem4}_L0${stem6}"
    flowcell_idx = $stem5
    flowcell_pat = r"[^_]+$"
    flowcells = {}
    for i in 1:size(samples, 1)
        if contains(samples[i, 2], prefix)
            mat = match(flowcell_pat, samples[i, 2])
            push!(flowcells, mat.match)
        end
    end
    sort!(flowcells)

    # Choose the sample
    flowcell = flowcells[flowcell_idx]
    index = 0
    for i in 1:size(samples, 1)
        if contains(samples[i, 2], prefix)
            mat = match(flowcell_pat, samples[i, 2])
            if mat.match == flowcell
                index = i
                break
            end
        end
    end

    url = samples[index, 9]
    readall(`wget --no-directories --recursive -A '*.sra' -O $target $url`)


# The SRA format is a scourge.
%_1.fastq.qp: %.sra
    $fastqdump --split-files $prereq
    $quip ${stem}_1.fastq
    $quip ${stem}_2.fastq
    rm ${stem}_1.fastq ${stem}_2.fastq

# Genomic alignments used by isolator, cufflinks
%.bam:X: %_1.fastq.qp
    unquip ${stem}_1.fastq.qp &
    unquip ${stem}_2.fastq.qp &
    wait
    $time -f "$TIMEFMT" -o $target.time.log -- \
    $star \
        --genomeDir ../data/star-GRCh38-ens76-ERCC \
        --genomeLoad LoadAndKeep \
        --limitBAMsortRAM 12000000000 \
        --readFilesIn ${stem}_1.fastq ${stem}_2.fastq \
        --runThreadN 8 \
        --quantMode TranscriptomeSAM \
        --outSAMtype BAM SortedByCoordinate \
        --outSAMstrandField intronMotif
    mv Aligned.sortedByCoord.out.bam $target
    mv Aligned.toTranscriptome.out.bam $stem.transcriptome.bam

    #    | $samtools view -S -b -u - \
    #    | $samtools sort -@ 4 -m 3G - $stem \
    #    > $target


%.bam.bai: %.bam
    samtools index $prereq

# Transcriptomic alignments used by BitSeq, RSEM
#%.transcriptome.bam:X: %_1.fastq.qp
#    mkfifo ${stem}_1.fastq.fifo
#    $quip -cd ${stem}_1.fastq.qp > ${stem}_1.fastq.fifo &
#
#    mkfifo ${stem}_2.fastq.fifo
#    $quip -cd ${stem}_2.fastq.qp > ${stem}_2.fastq.fifo &
#
#    $bowtie \
#        -v 3 \
#        --trim3 0 \
#        --trim5 0 \
#        --all \
#        -m 200 \
#        --threads 8 \
#        --sam \
#        -1 ${stem}_1.fastq.fifo \
#        -2 ${stem}_2.fastq.fifo \
#        ../data/bowtie-GRCh38-ens76-ERCC/transcriptome \
#        | $samtools view -Sb - > $target
#
#    rm ${stem}_1.fastq.fifo ${stem}_2.fastq.fifo


%.counts.tsv: %.bam
    $samcnt $prereq $human_genes > $target


counts.tsv:S$julia: ILM_BGI_A_1_1_1.counts.tsv ILM_BGI_A_2_1_1.counts.tsv \
                   ILM_BGI_A_3_1_1.counts.tsv ILM_BGI_A_4_1_1.counts.tsv \
                   ILM_BGI_A_5_1_1.counts.tsv ILM_BGI_B_1_1_1.counts.tsv \
                   ILM_BGI_B_2_1_1.counts.tsv ILM_BGI_B_3_1_1.counts.tsv \
                   ILM_BGI_B_4_1_1.counts.tsv ILM_BGI_B_5_1_1.counts.tsv
    using DataFrames
    merged = nothing
    for filename in split("$prereq")
        sample_name = match(r"((:?A|B)_\d+)", filename).captures[1]
        df = readtable(filename, header=true)
        names!(df, [:gene_id, symbol(sample_name)])
        if merged === nothing
            merged = df
        else
            merged = join(merged, df, on=[:gene_id])
        end
    end
    writetable("$target", merged, separator='\t')


deseq.tsv:SR --vanilla: counts.tsv
    library(DESeq)
    counts <- read.table("counts.tsv", header=TRUE, sep='\t')
    row.names(counts) <- counts$gene_id
    counts$gene_id <- NULL

    cds <- newCountDataSet(counts, c("A", "A", "A", "A", "A",
                                     "B", "B", "B", "B", "B"))
    cds <- estimateSizeFactors(cds)
    print(sizeFactors(cds))
    cds <- estimateDispersions(cds)

    result <- nbinomTest(cds, "A", "B")
    names(result)[3] <- "BaseMeanA"
    names(result)[4] <- "BaseMeanB"
    write.table(result, "$target", row.names=F, quote=F, sep='\t')


deseq.png:S$julia: deseq.tsv
    using DataFrames, Gadfly

    deseq = readtable("deseq.tsv", header=true)
    deseq = deseq[!isna(deseq[:padj]),:]
    deseq = deseq[abs(deseq[:log2FoldChange]) .< 10.0,:]

    #pl = plot(deseq, x=:baseMean, y=:log2FoldChange,
    #          color=(deseq[:padj] .< 0.01),
    #          Guide.colorkey("p &lt; 0.01"),
    #          Scale.x_log10, Geom.point)
    #draw(PNG("$target", 8inch, 6inch), pl)

    de = deseq[deseq[:padj] .< 0.01,:]
    pl = plot(deseq, x=:baseMean, y=:log2FoldChange,
              color=(deseq[:padj] .< 0.01),
              layer(xintercept=[median(de[:baseMean])], Geom.vline,
                    Theme(default_color=color("orange")), order=2),
              Guide.colorkey("p &lt; 0.01"),
              Scale.x_log10, Geom.point)
    draw(PNG("$target", 8inch, 6inch), pl)

    de = de[abs(de[:log2FoldChange]) .>= 2.0,:]
    pl = plot(deseq, x=:baseMean, y=:log2FoldChange,
              color=((deseq[:padj] .< 0.01) & (abs(deseq[:log2FoldChange]) .>= 2.0)),
              layer(xintercept=[median(de[:baseMean])], Geom.vline,
                    Theme(default_color=color("orange")), order=2),
              Guide.colorkey("p &lt; 0.01"),
              Scale.x_log10, Geom.point)
    draw(PNG("deseq2.png", 8inch, 6inch), pl)


# TODO: This is probably too slow. Let's try to rewrite it in julia.

# I want to see how the number of DE genes changes as deeper and deeper
# sequencing is performed. Does in plateau? I'm asserting that it doesn't
# plateau until all of the expressed genes are declared DE.
#deseq-resample.tsv:SR --vanilla: counts.tsv
#    library(DESeq)
#
#    num_de_genes <- function(counts) {
#        cds <- newCountDataSet(counts, c("A", "A", "A", "A", "A",
#                                         "B", "B", "B", "B", "B"))
#        cds <- estimateSizeFactors(cds)
#        print(sizeFactors(cds))
#        cds <- estimateDispersions(cds)
#
#        result <- nbinomTest(cds, "A", "B")
#        return(sum(result$pval < 0.01))
#    }
#
#    counts <- read.table("counts.tsv", header=TRUE, sep='\t')
#    row.names(counts) <- counts$gene_id
#    counts$gene_id <- NULL
#
#    m <- length(counts[,1])
#    n <- length(counts[1,])
#
#    decounts <- NULL
#    # for (num_samples in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7)) {
#    for (num_samples in c(1e6, 1e7)) {
#        print(n)
#        resampled_counts <- sapply(counts, function(col) {
#            print("sampling")
#            s <- sample(1:m, num_samples, rep=TRUE, prob=col)
#            print("done")
#            col_sample <- vapply(1:m, function(i) sum(s == i), 0)
#
#            return(col_sample)
#        })
#        resampled_counts <- as.data.frame(resampled_counts)
#        row.names(resampled_counts) <- row.names(counts)
#        print(head(resampled_counts))
#        decounts[[num_samples]] <- num_de_genes(resampled_counts)
#    }
#    print(decounts)

counts-resample-%.tsv:S$julia: counts.tsv
    using DataFrames, StatsBase

    const num_samples = $stem

    function run()
        counts = readtable("counts.tsv", header=true)
        newcounts = DataFrame(gene_id=counts[:gene_id])

        m = size(counts, 1)
        n = size(counts, 2) - 1

        for j in 1:n
            ss = sample(collect(1:m),
                        WeightVec(convert(Vector{Float64}, counts[:,j + 1])),
                        num_samples)
            resampled_counts = zeros(Int, m)
            for s in ss
                resampled_counts[s] += 1
            end
            newcounts[names(counts)[j + 1]] = resampled_counts
        end

        return newcounts
    end

    writetable("$target", run(), separator='\t')

deseq-resample.tsv:SR --vanilla: counts-resample-10000.tsv \
                                 counts-resample-100000.tsv \
                                 counts-resample-1000000.tsv \
                                 counts-resample-10000000.tsv
    library(DESeq)

    decount <- NULL
    for (n in c(10000, 100000, 1000000, 10000000)) {
        fn <- paste("counts-resample-", as.integer(n), ".tsv", sep="")
        counts <- read.table(fn, sep='\t', header=TRUE)
        row.names(counts) <- counts$gene_id
        counts$gene_id <- NULL

        cds <- newCountDataSet(counts, c("A", "A", "A", "A", "A",
                                         "B", "B", "B", "B", "B"))
        cds <- estimateSizeFactors(cds)
        cds <- estimateDispersions(cds)

        result <- nbinomTest(cds, "A", "B")
        pvals <- result$pval[!is.na(result$pval)]
        print(sum(pvals < 0.01))
        decount[n] <- sum(pvals < 0.01)
    }

    # print(decount)


isolator/gene-expression.tsv:
    cd isolator
    mk gene-expression.tsv


isolator/transcript-expression.tsv:
    cd isolator
    mk transcript-expression.tsv

isolator/batch-effect-transcript-expression.tsv:
    cd isolator
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-isolator.tsv:RS$julia: isolator/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true)

    cols = [symbol(string("$stem1", "_", i, "_tpm")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    # XXX: So I can iterate quickly
    #colmean = ex[symbol(string("$stem1", "_", 1, "_tpm"))]

    df = DataFrame(gene_id=ex[:gene_id],
                   isolator=colmean)
    writetable("$target", df, separator='\t')

ILM_BGI_([A-F])-transcript-isolator.tsv:RS$julia: isolator/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true)
    cols = [symbol(string("$stem1", "_", i, "_tpm")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(transcript_id=ex[:transcript_id],
                   isolator=colmean)
    writetable("$target", df, separator='\t')


sailfish/gene-expression.tsv:
    cd sailfish
    mk gene-expression.tsv


sailfish/transcript-expression.tsv:
    cd sailfish
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-sailfish.tsv:RS$julia: sailfish/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(gene_id=ex[:gene_id],
                   sailfish=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-sailfish.tsv:RS$julia: sailfish/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(transcript_id=ex[:transcript_id],
                   sailfish=colmean)
    writetable("$target", df, separator='\t')


bitseq/gene-expression.tsv:
    cd bitseq
    mk gene-expression.tsv


bitseq/transcript-expression.tsv:
    cd bitseq
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-bitseq.tsv:RS$julia: bitseq/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(gene_id=ex[:gene_id],
                   bitseq=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-bitseq.tsv:RS$julia: bitseq/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(transcript_id=ex[:transcript_id],
                   bitseq=colmean)
    writetable("$target", df, separator='\t')


cufflinks/genes.fpkm_table:
    cd cufflinks
    mk genes.fpkm_table


cufflinks/isoforms.fpkm_table:
    cd cufflinks
    mk isoforms.fpkm_table


ILM_BGI_([A-F])-gene-cufflinks.tsv:RS$julia: cufflinks/genes.fpkm_table
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(gene_id=ex[:gene_id],
                   cufflinks=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-cufflinks.tsv:RS$julia: cufflinks/isoforms.fpkm_table
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(transcript_id=ex[:transcript_id],
                   cufflinks=colmean)
    writetable("$target", df, separator='\t')


express/gene-expression.tsv:
    cd express
    mk gene-expression.tsv


express/transcript-expression.tsv:
    cd express
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-express.tsv:RS$julia: express/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(gene_id=ex[:gene_id],
                   express=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-express.tsv:RS$julia: express/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)
    df = DataFrame(transcript_id=ex[:transcript_id],
                   express=colmean)
    writetable("$target", df, separator='\t')


kallisto/gene-expression.tsv:
    cd kallisto
    mk gene-expression.tsv


kallisto/transcript-expression.tsv:
    cd kallisto
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-kallisto.tsv:RS$julia: kallisto/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(gene_id=ex[:gene_id],
                   kallisto=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-kallisto.tsv:RS$julia: kallisto/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(transcript_id=ex[:transcript_id],
                   kallisto=colmean)
    writetable("$target", df, separator='\t')


salmon/gene-expression.tsv:
    cd salmon
    mk gene-expression.tsv


salmon/transcript-expression.tsv:
    cd salmon
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-salmon.tsv:RS$julia: salmon/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(gene_id=ex[:gene_id],
                   salmon=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-salmon.tsv:RS$julia: salmon/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(transcript_id=ex[:transcript_id],
                   salmon=colmean)
    writetable("$target", df, separator='\t')


affy/gene-expression.tsv:
    cd affy
    mk gene-expression.tsv


([A-F])-gene-affy.tsv:RS$julia: affy/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("${stem1}_", i)) for i in 1:4]

    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(gene_id=ex[:gene_id],
                   affy=colmean)
    writetable("$target", df, separator='\t')


rsem/gene-expression-ml.tsv:
    cd rsem
    mk gene-expression-ml.tsv

rsem/gene-expression-pm.tsv:
    cd rsem
    mk gene-expression-pm.tsv

rsem/transcript-expression-ml.tsv:
    cd rsem
    mk transcript-expression-ml.tsv

rsem/transcript-expression-pm.tsv:
    cd rsem
    mk transcript-expression-pm.tsv

rsem/batch-effect-transcript-expression-ml.tsv:
    cd rsem
    mk batch-effect-transcript-expression-ml.tsv

rsem/batch-effect-transcript-expression-pm.tsv:
    cd rsem
    mk batch-effect-transcript-expression-pm.tsv


ILM_BGI_([A-F])-gene-rsem-ml.tsv:RS$julia: rsem/gene-expression-ml.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(gene_id=ex[:gene_id],
                   rsem_ml=colmean)
    writetable("$target", df, separator='\t')

ILM_BGI_([A-F])-gene-rsem-pm.tsv:RS$julia: rsem/gene-expression-pm.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(gene_id=ex[:gene_id],
                   rsem_pm=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-rsem-ml.tsv:RS$julia: rsem/transcript-expression-ml.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(transcript_id=ex[:transcript_id],
                   rsem_ml=colmean)
    writetable("$target", df, separator='\t')

ILM_BGI_([A-F])-transcript-rsem-pm.tsv:RS$julia: rsem/transcript-expression-pm.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols])
    colmean = 1e6 * colmean / sum(colmean)

    df = DataFrame(transcript_id=ex[:transcript_id],
                   rsem_pm=colmean)
    writetable("$target", df, separator='\t')


ERCC-([A-F]).tsv:RS$julia: \
        ERCC-${stem1}-control.tsv \
        ILM_BGI_${stem1}-gene-isolator.tsv \
        ILM_BGI_${stem1}-gene-cufflinks.tsv \
        ILM_BGI_${stem1}-gene-express.tsv \
        ILM_BGI_${stem1}-gene-kallisto.tsv \
        ILM_BGI_${stem1}-gene-bitseq.tsv \
        ILM_BGI_${stem1}-gene-rsem-ml.tsv \
        ILM_BGI_${stem1}-gene-rsem-pm.tsv \
        ILM_BGI_${stem1}-gene-sailfish.tsv \
        ILM_BGI_${stem1}-gene-salmon.tsv \
        ${stem1}-gene-affy.tsv

    using DataFrames

    ercc      = readtable("ERCC-${stem1}-control.tsv", header=true, separator='\t')
    isolator  = readtable("ILM_BGI_${stem1}-gene-isolator.tsv", header=true, separator='\t')
    cufflinks = readtable("ILM_BGI_${stem1}-gene-cufflinks.tsv", header=true, separator='\t')
    express   = readtable("ILM_BGI_${stem1}-gene-express.tsv", header=true, separator='\t')
    kallisto  = readtable("ILM_BGI_${stem1}-gene-kallisto.tsv", header=true, separator='\t')
    bitseq    = readtable("ILM_BGI_${stem1}-gene-bitseq.tsv", header=true, separator='\t')
    rsem_ml   = readtable("ILM_BGI_${stem1}-gene-rsem-ml.tsv", header=true, separator='\t')
    rsem_pm   = readtable("ILM_BGI_${stem1}-gene-rsem-pm.tsv", header=true, separator='\t')
    sailfish  = readtable("ILM_BGI_${stem1}-gene-sailfish.tsv", header=true, separator='\t')
    salmon    = readtable("ILM_BGI_${stem1}-gene-salmon.tsv", header=true, separator='\t')
    #affy      = readtable("${stem1}-gene-affy.tsv", header=true, separator='\t')

    merged = join(ercc,   isolator, on=:gene_id, kind=:inner)
    merged = join(merged, cufflinks, on=:gene_id, kind=:inner)
    merged = join(merged, express, on=:gene_id, kind=:inner)
    merged = join(merged, kallisto, on=:gene_id, kind=:inner)
    merged = join(merged, bitseq, on=:gene_id, kind=:inner)
    merged = join(merged, rsem_ml, on=:gene_id, kind=:inner)
    merged = join(merged, rsem_pm, on=:gene_id, kind=:inner)
    merged = join(merged, sailfish, on=:gene_id, kind=:inner)
    merged = join(merged, salmon, on=:gene_id, kind=:inner)
    #merged = join(merged, affy, on=:gene_id, kind=:inner)

    writetable("$target", merged, separator='\t')


ERCC-([A-D])-error.tsv:RS$julia: ERCC-${stem1}.tsv
    using DataFrames
    ex = readtable("$prereq", header=true)
    for col in names(ex)
        if col == :gene_id || col == :tlen
            continue
        end
        ex[col] ./= sum(ex[col])
    end

    error = copy(ex)
    for col in names(ex)
        if col == :gene_id || col == :tlen
            continue
        end
        error[col] = (ex[col] .- ex[:control])
    end

    writetable("$target", error, separator='\t')


ERCC-correlation.tsv:S$julia: ERCC-A.tsv ERCC-B.tsv ERCC-C.tsv ERCC-D.tsv
    using DataFrames
    methods = ["isolator", "cufflinks", "express", "rsem_ml",
               "rsem_pm", "bitseq", "sailfish", "salmon", "kallisto"]
    out = DataFrame(method=methods)
    include("mrd.jl")
    include("proportionality.jl")

    for filename in split("$prereq")
        sample = symbol(match(r"ERCC-(.)", filename).captures[1])
        df = readtable(filename, header=true)

        # These two spike-in are incorrectly annotated. Seriously, see the
        # paper, dudes.
        df = df[df[:gene_id] .!= "ERCC-00074",:]
        df = df[df[:gene_id] .!= "ERCC-00130",:]

        #cs = [round(mrd(df[:control], df[symbol(method)], 0.0 * df[:control], 0.1), 3)
        #      for method in methods]
        cs = [round(proportionality_correlation(df[:control], df[symbol(method)], 0.0 * df[:control], 0.1), 3)
              for method in methods]
        out[sample] = cs
    end

    writetable("$target", out, separator='\t')


ERCC-([A-D])-lengthbias.svg:RS$julia: ERCC-${stem1}-error.tsv
    using DataFrames, Gadfly
    df = readtable("$prereq", header=true)

    delete!(df, :control)
    delete!(df, :affy)

    df = melt(df, [:gene_id, :tlen])
    pl = plot(df, x=:tlen, y=:value, color=:variable,
              Guide.ylabel("Error"),
              Guide.xlabel("Spike-in Transcript Length"),
              Guide.colorkey("Method"))
    draw(SVG("$target", 6inch, 3inch), pl)
    #pl = plot(df, x=:tlen, y=:value, ygroup=:variable, label=:gene_id,
    #          Geom.subplot_grid(Geom.point, Geom.smooth(method=:lm), Geom.label))
    #draw(SVG("$target", 6inch, 18inch), pl)



ERCC-([A-D])-([A-D])-foldchange-control.tsv:RS$julia: ERCC-${stem1}-control.tsv ERCC-${stem2}-control.tsv
    using DataFrames
    a = readtable("ERCC-$stem1-control.tsv", header=true)[:,[:gene_id, :control]]
    names!(a, [:gene_id, :a])

    b = readtable("ERCC-$stem2-control.tsv", header=true)[:,[:gene_id, :control]]
    names!(b, [:gene_id, :b])

    ab = join(a, b, on=:gene_id)
    ab[:control] = Float64[log2(ai / bi) for (ai, bi) in zip(ab[:a], ab[:b])]
    delete!(ab, :a)
    delete!(ab, :b)

    writetable("$target", ab, separator='\t')


isolator/differential-gene-expression.tsv:
    cd isolator
    mk differential-gene-expression.tsv


# How do we want to do this? Compare all pairs? That's:
#   A-B, A-C, A-D, B-C, B-D, C-D
#

ERCC-([A-D])-([A-D])-foldchange-isolator.tsv:RS$julia: isolator/differential-gene-expression.tsv
    using DataFrames
    de = readtable("$prereq", header=true)

    condition_a = "$stem1"
    condition_b = "$stem2"

    de = de[((de[:condition_a] .== condition_a) & (de[:condition_b] .== condition_b)) |
            ((de[:condition_a] .== condition_b) & (de[:condition_b] .== condition_a)),:]

    de[de[:condition_a] .== condition_b,:median_log2_fold_change] =
        -de[de[:condition_a] .== condition_b,:median_log2_fold_change]

    # We should switch the sign if a and b are swapped. How do we do that?
    de = de[:,[:gene_id, :median_log2_fold_change]]
    names!(de, [:gene_id, :isolator])

    writetable("$target", de, separator='\t')


qpcr-%/gene-expression.tsv:
    cd qpcr-$stem
    mk gene-expression.tsv


qpcr-(primepcr|taqman)-([A-D]).tsv:RS$julia: qpcr-${stem1}/gene-expression.tsv
    using DataFrames
    data = readtable("$prereq", header=true, separator='\t')
    data = data[:, [:gene_id, :$stem2]]
    names!(data, [:gene_id, :qpcr])
    writetable("$target", data, separator='\t')


ERCC-([A-D])-([A-D])-foldchange.tsv:RS$julia: ERCC-${stem1}-${stem2}-foldchange-control.tsv \
                                              ERCC-${stem1}-${stem2}-foldchange-isolator.tsv
    using DataFrames

    control = readtable("ERCC-${stem1}-${stem2}-foldchange-control.tsv", header=true)
    isolator = readtable("ERCC-${stem1}-${stem2}-foldchange-isolator.tsv", header=true)

    joined = join(control, isolator, on=:gene_id)

    writetable("$target", joined, separator='\t')


# Comparing RNA-Seq and arrays to qPCR
qpcr-(primepcr|taqman)-([A-D])-comparison.tsv:RS$julia: qpcr-${stem1}-${stem2}.tsv \
                    ILM_BGI_${stem2}-gene-isolator.tsv \
                    ILM_BGI_${stem2}-gene-cufflinks.tsv \
                    ILM_BGI_${stem2}-gene-express.tsv \
                    ILM_BGI_${stem2}-gene-kallisto.tsv \
                    ILM_BGI_${stem2}-gene-bitseq.tsv \
                    ILM_BGI_${stem2}-gene-rsem-ml.tsv \
                    ILM_BGI_${stem2}-gene-rsem-pm.tsv \
                    ILM_BGI_${stem2}-gene-sailfish.tsv \
                    ILM_BGI_${stem2}-gene-salmon.tsv \

    using DataFrames

    qpcr      = readtable("qpcr-${stem1}-${stem2}.tsv", header=true, separator='\t');
    isolator  = readtable("ILM_BGI_${stem2}-gene-isolator.tsv", header=true, separator='\t');
    cufflinks = readtable("ILM_BGI_${stem2}-gene-cufflinks.tsv", header=true, separator='\t');
    express   = readtable("ILM_BGI_${stem2}-gene-express.tsv", header=true, separator='\t');
    kallisto  = readtable("ILM_BGI_${stem2}-gene-kallisto.tsv", header=true, separator='\t');
    bitseq    = readtable("ILM_BGI_${stem2}-gene-bitseq.tsv", header=true, separator='\t')
    rsem_ml   = readtable("ILM_BGI_${stem2}-gene-rsem-ml.tsv", header=true, separator='\t')
    rsem_pm   = readtable("ILM_BGI_${stem2}-gene-rsem-pm.tsv", header=true, separator='\t')
    sailfish  = readtable("ILM_BGI_${stem2}-gene-sailfish.tsv", header=true, separator='\t')
    salmon    = readtable("ILM_BGI_${stem2}-gene-salmon.tsv", header=true, separator='\t')

    merged = join(qpcr,   isolator, on=:gene_id, kind=:inner)
    merged = join(merged, cufflinks, on=:gene_id, kind=:inner)
    merged = join(merged, express, on=:gene_id, kind=:inner)
    merged = join(merged, kallisto, on=:gene_id, kind=:inner)
    merged = join(merged, bitseq, on=:gene_id, kind=:inner)
    merged = join(merged, rsem_ml, on=:gene_id, kind=:inner)
    merged = join(merged, rsem_pm, on=:gene_id, kind=:inner)
    merged = join(merged, sailfish, on=:gene_id, kind=:inner)
    merged = join(merged, salmon, on=:gene_id, kind=:inner)

    #for col in names(merged)
    #    if col == :gene_id || col == :tlen
    #        continue
    #    end
    #    merged[col] ./= sum(merged[col])
    #end

    writetable("$target", merged, separator='\t')


qpcr-(primepcr|taqman)-correlation.tsv:RS$julia: \
        qpcr-${stem1}-A-comparison.tsv \
        qpcr-${stem1}-B-comparison.tsv \
        qpcr-${stem1}-C-comparison.tsv \
        qpcr-${stem1}-D-comparison.tsv
    using DataFrames
    include("mrd.jl")
    include("proportionality.jl")

    methods = ["isolator", "cufflinks", "express", "kallisto", "rsem_ml",
               "rsem_pm", "bitseq", "sailfish", "salmon"]

    out = DataFrame(method=methods)
    for filename in split("$prereq")
        sample = symbol(match(r"-(.)-comparison\.tsv", filename).captures[1])
        df = readtable(filename, header=true)
        #cs = [round(mrd(df[:qpcr], df[symbol(method)], 1e-9 * sum(df[:qpcr]), 0.1), 3)
        #      for method in methods]
        cs = [round(proportionality_correlation(df[:qpcr], df[symbol(method)], 1e-9 * sum(df[:qpcr]), 0.1), 3)
              for method in methods]
        out[sample] = cs
    end

    writetable("$target", out, separator='\t')


# Measuring consistency of gene/transcipt expression.
%-expression-consistency.tsv:S$julia: \
        %_id_whitelist.txt \
        ILM_BGI_A-%-isolator.tsv  ILM_BGI_B-%-isolator.tsv \
        ILM_BGI_C-%-isolator.tsv  ILM_BGI_D-%-isolator.tsv \
        ILM_BGI_A-%-cufflinks.tsv ILM_BGI_B-%-cufflinks.tsv \
        ILM_BGI_C-%-cufflinks.tsv ILM_BGI_D-%-cufflinks.tsv \
        ILM_BGI_A-%-express.tsv   ILM_BGI_B-%-express.tsv \
        ILM_BGI_C-%-express.tsv   ILM_BGI_D-%-express.tsv \
        ILM_BGI_A-%-kallisto.tsv  ILM_BGI_B-%-kallisto.tsv \
        ILM_BGI_C-%-kallisto.tsv  ILM_BGI_D-%-kallisto.tsv \
        ILM_BGI_A-%-rsem-ml.tsv   ILM_BGI_B-%-rsem-ml.tsv \
        ILM_BGI_C-%-rsem-ml.tsv   ILM_BGI_D-%-rsem-ml.tsv \
        ILM_BGI_A-%-rsem-pm.tsv   ILM_BGI_B-%-rsem-pm.tsv \
        ILM_BGI_C-%-rsem-pm.tsv   ILM_BGI_D-%-rsem-pm.tsv \
        ILM_BGI_A-%-bitseq.tsv    ILM_BGI_B-%-bitseq.tsv \
        ILM_BGI_C-%-bitseq.tsv    ILM_BGI_D-%-bitseq.tsv \
        ILM_BGI_A-%-sailfish.tsv  ILM_BGI_B-%-sailfish.tsv \
        ILM_BGI_C-%-sailfish.tsv  ILM_BGI_D-%-sailfish.tsv \
        ILM_BGI_A-%-salmon.tsv    ILM_BGI_B-%-salmon.tsv \
        ILM_BGI_C-%-salmon.tsv    ILM_BGI_D-%-salmon.tsv
    using DataFrames, StatsBase
    include("mrd.jl")
    include("proportionality.jl")

    whitelist = Set()
    for line in eachline(open("${stem}_id_whitelist.txt"))
        push!(whitelist, strip(line))
    end

    methods = [
        "isolator", "cufflinks", "express", "kallisto", "rsem-ml", "rsem-pm",
        "bitseq", "sailfish", "salmon"]
    begin
        ans = DataFrame()
        for method in methods
            a = readtable(string("ILM_BGI_A-${stem}-", method, ".tsv"), header=true)
            names!(a, [:${stem}_id, :A])
            b = readtable(string("ILM_BGI_B-${stem}-", method, ".tsv"), header=true)
            names!(b, [:${stem}_id, :B])
            c = readtable(string("ILM_BGI_C-${stem}-", method, ".tsv"), header=true)
            names!(c, [:${stem}_id, :C])
            d = readtable(string("ILM_BGI_D-${stem}-", method, ".tsv"), header=true)
            names!(d, [:${stem}_id, :D])

            abcd = join(join(a, b, on=:${stem}_id), join(c, d, on=:${stem}_id), on=:${stem}_id)
            abcd = abcd[Bool[in(id, whitelist) for id in abcd[:${stem}_id]],:]

            n = size(abcd, 1)
            c_expected = DataFrame(${stem}_id=abcd[:${stem}_id],
                                   method=fill(method, n),
                                   sample=fill("C", n),
                                   value=abcd[:C],
                                   expected=0.75 * abcd[:A] + 0.25 * abcd[:B])
            c_expected[:value] = 1e6 * c_expected[:value] / sum(c_expected[:value])
            c_expected[:expected] = 1e6 * c_expected[:expected] / sum(c_expected[:expected])

            #@show (method, round(mrd(c_expected[:value], c_expected[:expected], 0.1, 0.1), 4))
            @show (method, round(proportionality_correlation(c_expected[:value], c_expected[:expected], 0.1, 0.1), 4))
            d_expected = DataFrame(${stem}_id=abcd[:${stem}_id],
                                   method=fill(method, n),
                                   sample=fill("D", n),
                                   value=abcd[:D],
                                   expected=0.25 * abcd[:A] + 0.75 * abcd[:B])
            d_expected[:value] = 1e6 * d_expected[:value] / sum(d_expected[:value])
            d_expected[:expected] = 1e6 * d_expected[:expected] / sum(d_expected[:expected])

            #@show (method, round(mrd(d_expected[:value], d_expected[:expected], 0.1, 0.1), 4))
            @show (method, round(proportionality_correlation(d_expected[:value], d_expected[:expected], 0.1, 0.1), 4))
            ans = vcat(ans, c_expected, d_expected)
        end

        writetable("$target", ans, separator='\t')
    end



batch-effect-comparison.tsv:S$julia: isolator/batch-effect-transcript-expression.tsv \
                                     isolator-biasfree/batch-effect-transcript-expression.tsv \
                                     rsem/batch-effect-transcript-expression.tsv \
                                     bitseq/batch-effect-transcript-expression.tsv \
                                     cufflinks/batch_effect_isoforms.fpkm_table \
                                     cufflinks-biasfree/batch_effect_isoforms.fpkm_table \
                                     express/batch-effect-transcript-expression.tsv \
                                     sailfish/batch-effect-transcript-expression.tsv \
                                     salmon/batch-effect-transcript-expression.tsv \
                                     kallisto/batch-effect-transcript-expression.tsv

    using DataFrames, StatsBase
    include("mrd.jl")

    # Isolator
    isolator = readtable("isolator/batch-effect-transcript-expression.tsv", header=true)
    names!(isolator, [symbol(replace(string(name), "_tpm", ""))
                      for name in names(isolator)])

    # Isolator Bias-free
    isolator_nobias = readtable("isolator-biasfree/batch-effect-transcript-expression.tsv", header=true)
    names!(isolator_nobias, [symbol(replace(string(name), "_tpm", ""))
                             for name in names(isolator_nobias)])

    function make_short_name(n)
        m = match(r"^ILM_(..._._\d)", string(n))
        return m == nothing ? n : symbol(m.captures[1])
    end

    # RSEM
    rsem_ml = readtable("rsem/batch-effect-transcript-expression-ml.tsv", header=true)
    names!(rsem_ml, Symbol[make_short_name(n) for n in names(rsem_ml)])

    rsem_pm = readtable("rsem/batch-effect-transcript-expression-pm.tsv", header=true)
    names!(rsem_pm, Symbol[make_short_name(n) for n in names(rsem_pm)])

    # BitSeq
    bitseq = readtable("bitseq/batch-effect-transcript-expression.tsv", header=true)
    names!(bitseq, Symbol[make_short_name(n) for n in names(bitseq)])

    # BitSeq-Biasfree
    bitseq_biasfree = readtable("bitseq-biasfree/batch-effect-transcript-expression.tsv", header=true)
    names!(bitseq_biasfree, Symbol[make_short_name(n) for n in names(bitseq_biasfree)])

    # Cufflinks
    cufflinks = readtable("cufflinks/batch_effect_isoforms.fpkm_table",
                          header=true, separator='\t')
    names!(cufflinks, Symbol[make_short_name(n) for n in names(cufflinks)])

    # Cufflinks-Biasfree
    cufflinks_biasfree = readtable("cufflinks-biasfree/batch_effect_isoforms.fpkm_table",
                                   header=true, separator='\t')
    names!(cufflinks_biasfree, Symbol[make_short_name(n) for n in names(cufflinks_biasfree)])

    # eXpress
    express = readtable("express/batch-effect-transcript-expression.tsv",
                        header=true, separator='\t')
    names!(express, Symbol[make_short_name(n) for n in names(express)])

    # Sailfish
    sailfish = readtable("sailfish/batch-effect-transcript-expression.tsv",
                        header=true, separator='\t')
    names!(sailfish, Symbol[make_short_name(n) for n in names(sailfish)])

    # Salmon
    salmon = readtable("salmon/batch-effect-transcript-expression.tsv",
                        header=true, separator='\t')
    names!(salmon, Symbol[make_short_name(n) for n in names(salmon)])

    # Salmon-Biasfree
    salmon_biasfree = readtable("salmon-biasfree/batch-effect-transcript-expression.tsv",
                        header=true, separator='\t')
    names!(salmon_biasfree, Symbol[make_short_name(n) for n in names(salmon_biasfree)])

    # Kallisto
    kallisto = readtable("kallisto/batch-effect-transcript-expression.tsv",
                        header=true, separator='\t')
    names!(kallisto, Symbol[make_short_name(n) for n in names(kallisto)])

    sample_names = [
       :AGR_A_1, :BGI_A_1, :CNL_A_1, :MAY_A_1, :NVS_A_1,
       :AGR_A_2, :BGI_A_2, :CNL_A_2, :MAY_A_2, :NVS_A_2 ]

    data = [("isolator", isolator),
            ("isolator_biasfree", isolator_nobias),
            ("rsem_ml", rsem_ml),
            ("rsem_pm", rsem_pm),
            ("bitseq", bitseq),
            ("bitseq_biasfree", bitseq_biasfree),
            ("cufflinks", cufflinks),
            ("cufflinks_biasfree", cufflinks_biasfree),
            ("express", express),
            ("sailfish", sailfish),
            ("salmon", salmon),
            ("salmon_biasfree", salmon_biasfree),
            ("kallisto", kallisto)]

    out_method_name = String[]
    out_sample_i = String[]
    out_sample_j = String[]
    out_rho = Float64[]

    for (method_name, method_data) in data
        @show method_name
        for i in 1:length(sample_names)
            #for j in i:length(sample_names)
            for j in 1:length(sample_names)
                if i == j
                    continue
                end

                if !haskey(method_data, sample_names[i]) ||
                   !haskey(method_data, sample_names[j])
                    continue
                end

                xs = method_data[sample_names[i]]
                xs = 1e6 * xs / sum(xs)

                ys = method_data[sample_names[j]]
                ys = 1e6 * ys / sum(ys)

                rho = mrd(xs, ys, 0.1, 0.1)
                #rho = corspearman(method_data[sample_names[i]],
                #                  method_data[sample_names[j]])
                #rho = cor(log(method_data[sample_names[i]]),
                #          log(method_data[sample_names[j]]))
                push!(out_method_name, method_name)
                push!(out_sample_i, string(sample_names[i]))
                push!(out_sample_j, string(sample_names[j]))
                push!(out_rho, rho)
            end
        end
    end

    out = DataFrame(method=out_method_name,
                    sample_i=out_sample_i,
                    sample_j=out_sample_j,
                    mrd=out_rho)
    writetable("$target", out, separator='\t')



