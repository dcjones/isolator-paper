
<../mkconfig

align:V: ILM_BGI_A_1_1_1.bam \
         ILM_BGI_A_2_1_1.bam \
         ILM_BGI_A_3_1_1.bam \
         ILM_BGI_A_4_1_1.bam \
         ILM_BGI_A_5_1_1.bam \
         ILM_BGI_B_1_1_1.bam \
         ILM_BGI_B_2_1_1.bam \
         ILM_BGI_B_3_1_1.bam \
         ILM_BGI_B_4_1_1.bam \
         ILM_BGI_B_5_1_1.bam \
         ILM_BGI_C_1_1_1.bam \
         ILM_BGI_C_2_1_1.bam \
         ILM_BGI_C_3_1_1.bam \
         ILM_BGI_C_4_1_1.bam \
         ILM_BGI_C_5_1_1.bam \
         ILM_BGI_D_1_1_1.bam \
         ILM_BGI_D_2_1_1.bam \
         ILM_BGI_D_3_1_1.bam \
         ILM_BGI_D_4_1_1.bam \
         ILM_BGI_D_5_1_1.bam \
         ILM_BGI_A_1_1_1.transcriptome.bam \
         ILM_BGI_A_2_1_1.transcriptome.bam \
         ILM_BGI_A_3_1_1.transcriptome.bam \
         ILM_BGI_A_4_1_1.transcriptome.bam \
         ILM_BGI_A_5_1_1.transcriptome.bam \
         ILM_BGI_B_1_1_1.transcriptome.bam \
         ILM_BGI_B_2_1_1.transcriptome.bam \
         ILM_BGI_B_3_1_1.transcriptome.bam \
         ILM_BGI_B_4_1_1.transcriptome.bam \
         ILM_BGI_B_5_1_1.transcriptome.bam \
         ILM_BGI_C_1_1_1.transcriptome.bam \
         ILM_BGI_C_2_1_1.transcriptome.bam \
         ILM_BGI_C_3_1_1.transcriptome.bam \
         ILM_BGI_C_4_1_1.transcriptome.bam \
         ILM_BGI_C_5_1_1.transcriptome.bam \
         ILM_BGI_D_1_1_1.transcriptome.bam \
         ILM_BGI_D_2_1_1.transcriptome.bam \
         ILM_BGI_D_3_1_1.transcriptome.bam \
         ILM_BGI_D_4_1_1.transcriptome.bam \
         ILM_BGI_D_5_1_1.transcriptome.bam \


%_id_whitelist.txt:Sjulia: $human_genes
    id_pat = r"${stem}_id\s+\"([^\"]*)\""
    chrom_pat = r"^(\d+|X|Y|MT)\Z"
    whitelist = Set()
    for line in eachline(open("$prereq"))
        if line[1] == '#'
            continue
        end

        row = split(line, '\t')
        if match(chrom_pat, row[1]) === nothing
            continue
        end

        m = match(id_pat, row[9])
        if m === nothing
            continue
        end

        push!(whitelist, m.captures[1])
    end

    out = open("$target", "w")
    for id in whitelist
        println(out, id)
    end



# ERCC spike-in references and documentation
ERCC92.fa:
    wget http://tools.invitrogen.com/downloads/ERCC92.fa

ERCC92.gtf:
    wget http://tools.invitrogen.com/downloads/ERCC92.gtf

ERCC_Controls_Analysis.txt:
    wget http://tools.invitrogen.com/downloads/ERCC_Controls_Analysis.txt

ERCC-A-control.tsv:Sjulia: ERCC_Controls_Analysis.txt
    using DataFrames
    ercc = readtable("$prereq", header=true, separator='\t')
    ercc = ercc[[:ERCC_ID, :concentration_in_Mix_1_attomoles_ul_]]
    names!(ercc, [:gene_id, :control])

    tlens = readtable("ERCC-tlens.tsv", header=false)
    names!(tlens, [:gene_id, :tlen])
    ercc = join(ercc, tlens, on=:gene_id)

    writetable("$target", ercc)

ERCC-B-control.tsv:Sjulia: ERCC_Controls_Analysis.txt
    using DataFrames
    ercc = readtable("$prereq", header=true, separator='\t')
    ercc = ercc[[:ERCC_ID, :concentration_in_Mix_2_attomoles_ul_]]
    names!(ercc, [:gene_id, :control])

    tlens = readtable("ERCC-tlens.tsv", header=false)
    names!(tlens, [:gene_id, :tlen])
    ercc = join(ercc, tlens, on=:gene_id)

    writetable("$target", ercc)

ERCC-C-control.tsv:Sjulia: ERCC_Controls_Analysis.txt
    using DataFrames
    ercc = readtable("$prereq", header=true, separator='\t')
    control = 0.75 .* ercc[:concentration_in_Mix_1_attomoles_ul_] .+
              0.25 .* ercc[:concentration_in_Mix_2_attomoles_ul_]
    ercc = DataFrame(gene_id=ercc[:ERCC_ID], control=control)

    tlens = readtable("ERCC-tlens.tsv", header=false)
    names!(tlens, [:gene_id, :tlen])
    ercc = join(ercc, tlens, on=:gene_id)

    writetable("$target", ercc)

ERCC-D-control.tsv:Sjulia: ERCC_Controls_Analysis.txt
    using DataFrames
    ercc = readtable("$prereq", header=true, separator='\t')
    control = 0.25 .* ercc[:concentration_in_Mix_1_attomoles_ul_] .+
              0.75 .* ercc[:concentration_in_Mix_2_attomoles_ul_]
    ercc = DataFrame(gene_id=ercc[:ERCC_ID], control=control)

    tlens = readtable("ERCC-tlens.tsv", header=false)
    names!(tlens, [:gene_id, :tlen])
    ercc = join(ercc, tlens, on=:gene_id)

    writetable("$target", ercc)

ERCC:V: ERCC-A.tsv ERCC-B.tsv \
        ERCC-C.tsv ERCC-D.tsv

# Obtain, decompress, recompress, and align samples from SEQC dataset.

# Naming scehme for these files:
#
#    [PLATFORM]_[ORIGIN]_[SAMPLE]_[REPLICATE]_[FLOWCELL]_[FLOWCELL LANE]_[MATE]
#

([A-Z]{3})_([A-Z]{3})_([A-F])_(\d)_(\d+)_(\d+).sra:XRSjulia: seqc_samples.tsv
    samples = readdlm("$prereq", '\t')
    target = "$target"

    # Assign a numerical index to flowcells
    prefix = "SEQC_${stem1}_${stem2}_${stem3}_${stem4}_L0${stem6}"
    flowcell_idx = $stem5
    flowcell_pat = r"[^_]+$"
    flowcells = {}
    for i in 1:size(samples, 1)
        if contains(samples[i, 2], prefix)
            mat = match(flowcell_pat, samples[i, 2])
            push!(flowcells, mat.match)
        end
    end
    sort!(flowcells)

    # Choose the sample
    flowcell = flowcells[flowcell_idx]
    index = 0
    for i in 1:size(samples, 1)
        if contains(samples[i, 2], prefix)
            mat = match(flowcell_pat, samples[i, 2])
            if mat.match == flowcell
                index = i
                break
            end
        end
    end

    url = samples[index, 9]
    readall(`wget --no-directories --recursive -A '*.sra' -O $target $url`)


# The SRA format is a scourge.
%_1.fastq.qp: %.sra
    $fastqdump --split-files $prereq
    $quip ${stem}_1.fastq
    $quip ${stem}_2.fastq
    rm ${stem}_1.fastq ${stem}_2.fastq

# Genomic alignments used by isolator, cufflinks
%.bam:X: %_1.fastq.qp
    $star \
        --genomeDir ../data/star-GRCh38-ens76-ERCC \
        --readFilesCommand "${quip} -cd" \
        --readFilesIn ${stem}_1.fastq.qp ${stem}_2.fastq.qp \
        --runThreadN 8 \
        --outStd SAM \
        --outSAMstrandField intronMotif \
        | $samtools view -S -b -u - \
        | $samtools sort -m 5G - $stem \
        > $target

%.bam.bai: %.bam
    samtools index $prereq

# Transcriptomic alignments used by BitSeq, RSEM
%.transcriptome.bam:X: %_1.fastq.qp
    mkfifo ${stem}_1.fastq.fifo
    $quip -cd ${stem}_1.fastq.qp > ${stem}_1.fastq.fifo &

    mkfifo ${stem}_2.fastq.fifo
    $quip -cd ${stem}_2.fastq.qp > ${stem}_2.fastq.fifo &

    $bowtie \
        -v 3 \
        --trim3 0 \
        --trim5 0 \
        --all \
        -m 200 \
        --threads 8 \
        --sam \
        -1 ${stem}_1.fastq.fifo \
        -2 ${stem}_2.fastq.fifo \
        ../data/bowtie-GRCh38-ens76-ERCC/transcriptome \
        | $samtools view -Sb - > $target

    rm ${stem}_1.fastq.fifo ${stem}_2.fastq.fifo


isolator/gene-expression.tsv:
    cd isolator
    mk gene-expression.tsv


isolator/transcript-expression.tsv:
    cd isolator
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-isolator.tsv:RSjulia: isolator/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true)
    cols = [symbol(string("$stem1", "_", i, "_adjusted_tpm")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 5
    df = DataFrame(gene_id=ex[:gene_id],
                   isolator=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-isolator.tsv:RSjulia: isolator/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true)
    cols = [symbol(string("$stem1", "_", i, "_adjusted_tpm")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 5
    df = DataFrame(transcript_id=ex[:transcript_id],
                   isolator=colmean)
    writetable("$target", df, separator='\t')


bitseq/gene-expression.tsv:
    cd bitseq
    mk gene-expression.tsv


bitseq/transcript-expression.tsv:
    cd bitseq
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-bitseq.tsv:RSjulia: bitseq/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 5
    df = DataFrame(gene_id=ex[:gene_id],
                   bitseq=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-bitseq.tsv:RSjulia: bitseq/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 5
    df = DataFrame(transcript_id=ex[:transcript_id],
                   bitseq=colmean)
    writetable("$target", df, separator='\t')


cufflinks/genes.fpkm_table:
    cd cufflinks
    mk genes.fpkm_table


ILM_BGI_([A-F])-gene-cufflinks.tsv:RSjulia: cufflinks/genes.fpkm_table
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 5
    df = DataFrame(gene_id=ex[:gene_id],
                   cufflinks=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-cufflinks.tsv:RSjulia: cufflinks/isoforms.fpkm_table
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 5
    df = DataFrame(transcript_id=ex[:transcript_id],
                   cufflinks=colmean)
    writetable("$target", df, separator='\t')


affy/gene-expression.tsv:
    cd affy
    mk gene-expression.tsv


([A-F])-gene-affy.tsv:RSjulia: affy/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("${stem1}_", i)) for i in 1:4]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 4
    df = DataFrame(gene_id=ex[:gene_id],
                   affy=colmean)
    writetable("$target", df, separator='\t')


rsem/gene-expression.tsv:
    cd rsem
    mk gene-expression.tsv


rsem/transcript-expression.tsv:
    cd rsem
    mk transcript-expression.tsv


ILM_BGI_([A-F])-gene-rsem.tsv:RSjulia: rsem/gene-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 5
    df = DataFrame(gene_id=ex[:gene_id],
                   rsem=colmean)
    writetable("$target", df, separator='\t')


ILM_BGI_([A-F])-transcript-rsem.tsv:RSjulia: rsem/transcript-expression.tsv
    using DataFrames
    ex = readtable("$prereq", header=true, separator='\t')
    cols = [symbol(string("ILM_BGI_${stem1}_", i, "_1_1")) for i in 1:5]
    colmean = reduce(+, [ex[col] for col in cols]) ./ 5
    df = DataFrame(transcript_id=ex[:transcript_id],
                   rsem=colmean)
    writetable("$target", df, separator='\t')


ERCC-([A-F]).tsv:RSjulia: \
        ERCC-${stem1}-control.tsv \
        ILM_BGI_${stem1}-gene-isolator.tsv \
        ILM_BGI_${stem1}-gene-cufflinks.tsv \
        ILM_BGI_${stem1}-gene-bitseq.tsv \
        ILM_BGI_${stem1}-gene-rsem.tsv \
        ${stem1}-gene-affy.tsv

    using DataFrames

    ercc      = readtable("ERCC-${stem1}-control.tsv", header=true, separator='\t')
    isolator  = readtable("ILM_BGI_${stem1}-isolator.tsv", header=true, separator='\t')
    cufflinks = readtable("ILM_BGI_${stem1}-cufflinks.tsv", header=true, separator='\t')
    bitseq    = readtable("ILM_BGI_${stem1}-bitseq.tsv", header=true, separator='\t')
    rsem      = readtable("ILM_BGI_${stem1}-rsem.tsv", header=true, separator='\t')
    affy      = readtable("${stem1}-affy.tsv", header=true, separator='\t')

    merged = join(ercc,   isolator, on=:gene_id, kind=:inner)
    merged = join(merged, cufflinks, on=:gene_id, kind=:inner)
    merged = join(merged, bitseq, on=:gene_id, kind=:inner)
    merged = join(merged, rsem, on=:gene_id, kind=:inner)
    merged = join(merged, affy, on=:gene_id, kind=:inner)

    for col in names(merged)
        if col == :gene_id || col == :tlen
            continue
        end
        merged[col] ./= sum(merged[col])
    end

    writetable("$target", merged, separator='\t')


ERCC-([A-D])-error.tsv:RSjulia: ERCC-${stem1}.tsv
    using DataFrames
    ex = readtable("$prereq", header=true)
    for col in names(ex)
        if col == :gene_id || col == :tlen
            continue
        end
        ex[col] ./= sum(ex[col])
    end

    error = copy(ex)
    for col in names(ex)
        if col == :gene_id || col == :tlen
            continue
        end
        error[col] = (ex[col] .- ex[:control])
    end

    writetable("$target", error, separator='\t')


ERCC-correlation.tsv:Sjulia: ERCC-A.tsv ERCC-B.tsv ERCC-C.tsv ERCC-D.tsv
    using DataFrames
    methods = ["affy", "isolator", "cufflinks", "rsem", "bitseq"]
    out = DataFrame(method=methods)
    for filename in split("$prereq")
        sample = symbol(match(r"ERCC-(.)", filename).captures[1])
        df = readtable(filename, header=true)
        cs = [cor(df[:control], df[symbol(method)])
              for method in methods]
        out[sample] = cs
    end

    writetable("$target", out, separator='\t')


ERCC-([A-D])-lengthbias.svg:RSjulia: ERCC-${stem1}-error.tsv
    using DataFrames, Gadfly
    df = readtable("$prereq", header=true)

    df = melt(df, [:gene_id, :tlen])
    pl = plot(df, x=:tlen, y=:value, ygroup=:variable, label=:gene_id,
              Geom.subplot_grid(Geom.point, Geom.smooth(method=:lm), Geom.label))
    draw(SVG("$target", 6inch, 18inch), pl)



ERCC-([A-D])-([A-D])-foldchange-control.tsv:RSjulia: ERCC-${stem1}-control.tsv ERCC-${stem2}-control.tsv
    using DataFrames
    a = readtable("ERCC-$stem1-control.tsv", header=true)[:,[:gene_id, :control]]
    names!(a, [:gene_id, :a])

    b = readtable("ERCC-$stem2-control.tsv", header=true)[:,[:gene_id, :control]]
    names!(b, [:gene_id, :b])

    ab = join(a, b, on=:gene_id)
    ab[:control] = Float64[log2(ai / bi) for (ai, bi) in zip(ab[:a], ab[:b])]
    delete!(ab, :a)
    delete!(ab, :b)

    writetable("$target", ab, separator='\t')


isolator/differential-gene-expression.tsv:
    cd isolator
    mk differential-gene-expression.tsv


# How do we want to do this? Compare all pairs? That's:
#   A-B, A-C, A-D, B-C, B-D, C-D
#

ERCC-([A-D])-([A-D])-foldchange-isolator.tsv:RSjulia: isolator/differential-gene-expression.tsv
    using DataFrames
    de = readtable("$prereq", header=true)

    condition_a = "$stem1"
    condition_b = "$stem2"

    de = de[((de[:condition_a] .== condition_a) & (de[:condition_b] .== condition_b)) |
            ((de[:condition_a] .== condition_b) & (de[:condition_b] .== condition_a)),:]

    de[de[:condition_a] .== condition_b,:median_log2_fold_change] =
        -de[de[:condition_a] .== condition_b,:median_log2_fold_change]

    # We should switch the sign if a and b are swapped. How do we do that?
    de = de[:,[:gene_id, :median_log2_fold_change]]
    names!(de, [:gene_id, :isolator])

    writetable("$target", de, separator='\t')


qpcr/gene-expression.tsv:
    cd qpcr
    mk gene-expression.tsv


([A-D])-gene-qpcr.tsv:RSjulia: qpcr/gene-expression.tsv
    using DataFrames
    data = readtable("$prereq", header=true, separator='\t')
    data = data[:, [:gene_id, :$stem1]]
    names!(data, [:gene_id, :qpcr])
    writetable("$target", data, separator='\t')


ERCC-([A-D])-([A-D])-foldchange.tsv:RSjulia: ERCC-${stem1}-${stem2}-foldchange-control.tsv \
                                             ERCC-${stem1}-${stem2}-foldchange-isolator.tsv
    using DataFrames

    control = readtable("ERCC-${stem1}-${stem2}-foldchange-control.tsv", header=true)
    isolator = readtable("ERCC-${stem1}-${stem2}-foldchange-isolator.tsv", header=true)

    joined = join(control, isolator, on=:gene_id)

    writetable("$target", joined, separator='\t')


# Comparing RNA-Seq and arrays to qPCR
([A-D]).tsv:RSjulia: $stem1-qpcr.tsv \
                    ILM_BGI_${stem1}-isolator.tsv \
                    ILM_BGI_${stem1}-cufflinks.tsv \
                    ILM_BGI_${stem1}-bitseq.tsv \
                    ILM_BGI_${stem1}-rsem.tsv

    using DataFrames

    qpcr      = readtable("${stem1}-qpcr.tsv", header=true, separator='\t');
    isolator  = readtable("ILM_BGI_${stem1}-isolator.tsv", header=true, separator='\t');
    cufflinks = readtable("ILM_BGI_${stem1}-cufflinks.tsv", header=true, separator='\t');
    bitseq    = readtable("ILM_BGI_${stem1}-bitseq.tsv", header=true, separator='\t')
    rsem      = readtable("ILM_BGI_${stem1}-rsem.tsv", header=true, separator='\t')

    merged = join(qpcr,   isolator, on=:gene_id, kind=:inner)
    merged = join(merged, cufflinks, on=:gene_id, kind=:inner)
    merged = join(merged, bitseq, on=:gene_id, kind=:inner)
    merged = join(merged, rsem, on=:gene_id, kind=:inner)

    for col in names(merged)
        if col == :gene_id || col == :tlen
            continue
        end
        merged[col] ./= sum(merged[col])
    end

    writetable("$target", merged, separator='\t')


correlation.tsv:Sjulia: A.tsv B.tsv C.tsv D.tsv
    using DataFrames
    methods = ["isolator", "cufflinks", "rsem", "bitseq"]
    out = DataFrame(method=methods)
    for filename in split("$prereq")
        sample = symbol(match(r"(.)\.tsv", filename).captures[1])
        df = readtable(filename, header=true)
        cs = [cor(df[:qpcr], df[symbol(method)])
              for method in methods]
        out[sample] = cs
    end

    writetable("$target", out, separator='\t')


# Measuring consistency of gene/transcipt expression.
%-expression-consistency.tsv:Sjulia: \
        %_id_whitelist.txt \
        ILM_BGI_A-%-isolator.tsv  ILM_BGI_B-%-isolator.tsv \
        ILM_BGI_C-%-isolator.tsv  ILM_BGI_D-%-isolator.tsv \
        ILM_BGI_A-%-cufflinks.tsv ILM_BGI_B-%-cufflinks.tsv \
        ILM_BGI_C-%-cufflinks.tsv ILM_BGI_D-%-cufflinks.tsv \
        ILM_BGI_A-%-rsem.tsv      ILM_BGI_B-%-rsem.tsv \
        ILM_BGI_C-%-rsem.tsv      ILM_BGI_D-%-rsem.tsv \
        ILM_BGI_A-%-bitseq.tsv    ILM_BGI_B-%-bitseq.tsv \
        ILM_BGI_C-%-bitseq.tsv    ILM_BGI_D-%-bitseq.tsv
    using DataFrames, StatsBase

    whitelist = Set()
    for line in eachline(open("${stem}_id_whitelist.txt"))
        push!(whitelist, strip(line))
    end

    methods = [
        "isolator", "cufflinks", "rsem", "bitseq" ]
    begin
        ans = DataFrame()
        for method in methods
            a = readtable(string("ILM_BGI_A-${stem}-", method, ".tsv"), header=true)
            names!(a, [:${stem}_id, :A])
            b = readtable(string("ILM_BGI_B-${stem}-", method, ".tsv"), header=true)
            names!(b, [:${stem}_id, :B])
            c = readtable(string("ILM_BGI_C-${stem}-", method, ".tsv"), header=true)
            names!(c, [:${stem}_id, :C])
            d = readtable(string("ILM_BGI_D-${stem}-", method, ".tsv"), header=true)
            names!(d, [:${stem}_id, :D])

            abcd = join(join(a, b, on=:${stem}_id), join(c, d, on=:${stem}_id), on=:${stem}_id)
            abcd = abcd[Bool[in(id, whitelist) for id in abcd[:${stem}_id]],:]

            n = size(abcd, 1)
            c_expected = DataFrame(${stem}_id=abcd[:${stem}_id],
                                   method=fill(method, n),
                                   sample=fill("C", n),
                                   value=abcd[:C],
                                   expected=0.75 * abcd[:A] + 0.25 * abcd[:B])
            @show (method, corspearman(c_expected[:value], c_expected[:expected]))
            d_expected = DataFrame(${stem}_id=abcd[:${stem}_id],
                                   method=fill(method, n),
                                   sample=fill("D", n),
                                   value=abcd[:D],
                                   expected=0.25 * abcd[:A] + 0.75 * abcd[:B])
            @show (method, corspearman(d_expected[:value], d_expected[:expected]))
            ans = rbind(ans, c_expected, d_expected)
        end

        writetable("$target", ans, separator='\t')
    end


