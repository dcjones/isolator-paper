
<../../mkconfig


results=\
       A/abundance.tsv \
       B/abundance.tsv \
       C/abundance.tsv \
       D/abundance.tsv \
       ILM_MAY_A/abundance.tsv \
       ILM_MAY_B/abundance.tsv

batch_effect_results= \
    ILM_AGR_A_1_2_1/abundance.tsv \
    ILM_BGI_A_1_2_1/abundance.tsv \
    ILM_CNL_A_1_2_1/abundance.tsv \
    ILM_MAY_A_1_2_1/abundance.tsv \
    ILM_NVS_A_1_2_1/abundance.tsv \
    ILM_AGR_A_2_2_1/abundance.tsv \
    ILM_BGI_A_2_2_1/abundance.tsv \
    ILM_CNL_A_2_2_1/abundance.tsv \
    ILM_MAY_A_2_2_1/abundance.tsv \
    ILM_NVS_A_2_2_1/abundance.tsv


results:V: $results
all:V: $results $batch_effect_results


kallisto_index: ../../data/Homo_sapiens.GRCh38.76.ERCC.fa
    $kallisto index -i kallisto_index ../../data/Homo_sapiens.GRCh38.76.ERCC.fa


([ABCD])/abundance.tsv:R: kallisto_index
    mkfifo ${stem1}_1.fastq ${stem1}_2.fastq
    cat ../ILM_BGI_${stem1}_?_1*_1.fastq > ${stem1}_1.fastq &
    cat ../ILM_BGI_${stem1}_?_1*_2.fastq > ${stem1}_2.fastq &

    # Kallisto is single-threaded, so we should time
    # it with `time mk -p=8 all` to be fair.
    #$time -f "$TIMEFMT" -o $stem.time.log -- \

    $kallisto quant \
        --bias --threads 8 \
        -o $stem1 -i kallisto_index --plaintext \
        ${stem1}_1.fastq ${stem1}_2.fastq

    rm ${stem1}_1.fastq ${stem1}_2.fastq


(ILM_MAY_[ABCD])/abundance.tsv:R: kallisto_index
    mkfifo ${stem1}_1.fastq ${stem1}_2.fastq
    cat ../${stem1}_?_1*_1.fastq > ${stem1}_1.fastq &
    cat ../${stem1}_?_1*_2.fastq > ${stem1}_2.fastq &

    # Kallisto is single-threaded, so we should time
    # it with `time mk -p=8 all` to be fair.
    #$time -f "$TIMEFMT" -o $stem.time.log -- \

    $kallisto quant \
        --bias --threads 8 \
        -o $stem1 -i kallisto_index --plaintext \
        ${stem1}_1.fastq ${stem1}_2.fastq

    rm ${stem1}_1.fastq ${stem1}_2.fastq


ILM_(..._[ABCD]_\d+_\d+_\d+)/abundance.tsv:R: kallisto_index ../ILM_%_1.fastq
    $kallisto quant \
        --bias --threads 8 \
        -o ILM_$stem -i kallisto_index --plaintext \
        ../ILM_${stem}_1.fastq ../ILM_${stem}_2.fastq


gene_id_transcript_id.tsv: $human_genes
    mkfifo gene_ids.fifo
    grep gene_id $human_genes \
        | grep transcript_id \
        | grep -Po "gene_id \"[^\"]*\"" \
        | sed 's/gene_id //' \
        | sed 's/\"//g'> gene_ids.fifo &

    mkfifo transcript_ids.fifo
    grep gene_id $human_genes \
        | grep transcript_id \
        | grep -Po "transcript_id \"[^\"]*\"" \
        | sed 's/transcript_id //' \
        | sed 's/\"//g'> transcript_ids.fifo &

    paste gene_ids.fifo transcript_ids.fifo | sort -u > $target
    rm gene_ids.fifo transcript_ids.fifo


transcript-expression.tsv:S$julia: $results
    using DataFrames

    joined = nothing
    for filename in split("$prereq")
        sample = symbol(match(r"^(.*)\/", filename).captures[1])
        ex = readtable(filename, separator='\t', header=true)
        df = DataFrame(transcript_id=ex[:target_id])
        df[sample] = ex[:tpm]

        joined = joined == nothing ? df : join(joined, df, on=:transcript_id)
    end

    writetable("$target", joined, separator='\t')


batch-effect-transcript-expression.tsv:S$julia: $batch_effect_results
    using DataFrames

    joined = nothing
    for filename in split("$prereq")
        sample = symbol(match(r"^ILM_..._._\d", filename).match)
        ex = readtable(filename, separator='\t', header=true)
        df = DataFrame(transcript_id=ex[:target_id])
        df[sample] = ex[:tpm]

        joined = joined == nothing ? df : join(joined, df, on=:transcript_id)
    end

    writetable("$target", joined, separator='\t')


#transcript-expression.tsv:S$julia: $results
#    using DataFrames
#
#    joined = nothing
#    for filename in split("$prereq")
#        sample = symbol(match(r"^(ILM_..._._\d+_\d+_\d+)", filename).captures[1])
#        ex = readtable(filename, separator='\t', header=true)
#        df = DataFrame(transcript_id=ex[:target_id])
#        df[sample] = ex[:tpm]
#
#        joined = joined == nothing ? df : join(joined, df, on=:transcript_id)
#    end
#
#    writetable("$target", joined, separator='\t')

gene-expression.tsv:S$julia: gene_id_transcript_id.tsv $results
    using DataFrames, DataStructures

    gene_id_transcript_id = Dict()
    for line in eachline(open("gene_id_transcript_id.tsv"))
        (gene_id, transcript_id) = split(strip(line))
        gene_id_transcript_id[transcript_id] = gene_id
    end

    joined = nothing
    for filename in split("$results")
        sample = symbol(match(r"^(.)\/", filename).captures[1])
        ex = readtable(filename, separator='\t', header=true)

        gene_expression = DefaultDict(() -> 0.0)
        for (transcript_id, expression) in zip(ex[:target_id], ex[:tpm])
            gene_id = gene_id_transcript_id[transcript_id]
            gene_expression[gene_id] += expression
        end

        df = DataFrame(gene_id = collect(String, keys(gene_expression)))
        df[symbol(sample)] = collect(Float64, values(gene_expression))

        joined = joined == nothing ? df : join(joined, df, on=:gene_id)
    end

    writetable("$target", joined, separator='\t')



#gene-expression.tsv:S$julia: gene_id_transcript_id.tsv $results
#    using DataFrames, DataStructures
#
#    gene_id_transcript_id = Dict()
#    for line in eachline(open("gene_id_transcript_id.tsv"))
#        (gene_id, transcript_id) = split(strip(line))
#        gene_id_transcript_id[transcript_id] = gene_id
#    end
#
#    joined = nothing
#    for filename in split("$results")
#        sample = symbol(match(r"^(ILM_..._._\d+_\d+_\d+)", filename).captures[1])
#        ex = readtable(filename, separator='\t', header=true)
#
#        gene_expression = DefaultDict(() -> 0.0)
#        for (transcript_id, expression) in zip(ex[:target_id], ex[:tpm])
#            gene_id = gene_id_transcript_id[transcript_id]
#            gene_expression[gene_id] += expression
#        end
#
#        df = DataFrame(gene_id = collect(String, keys(gene_expression)))
#        df[symbol(sample)] = collect(Float64, values(gene_expression))
#
#        joined = joined == nothing ? df : join(joined, df, on=:gene_id)
#    end
#
#    writetable("$target", joined, separator='\t')
#
#

