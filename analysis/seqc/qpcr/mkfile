# GPL18522-tbl-1.txt  GSM1361812-tbl-1.txt  GSM1361813-tbl-1.txt GSM1361814-tbl-1.txt  GSM1361815-tbl-1.txt:

GPL18522_family.xml.tgz:
    wget ftp://ftp.ncbi.nlm.nih.gov/geo/platforms/GPL18nnn/GPL18522/miniml/GPL18522_family.xml.tgz

%-tbl-1.txt: GPL18522_family.xml.tgz
    tar xzf $prereq $target
    touch $target

feature-names.txt: GPL18522-tbl-1.txt
    cut -f2 $prereq > $target


GSM%.tsv:Sjulia: GSM%-tbl-1.txt
    using DataFrames, DataStructures

    features = readtable("feature-names.txt", header=false)
    data = readtable("GSM${stem}-tbl-1.txt", header=false, separator='\t')

    writetable("$target",
               DataFrame(gene_id=features[:x1],
                         value=data[:x2]))


#gene-expression.tsv:SR --vanilla: feature-names.txt GSM1361812.tsv \
#                                  GSM1361813.tsv GSM1361814.tsv \
#                                  GSM1361814.tsv
#    install.packages("gplots", repos="http://cran.fhcrc.org/")
#    source("http://bioconductor.org/biocLite.R")
#    biocLite(c("HTqPCR"), suppressUpdates=TRUE)
#
#    library(HTqPCR)
#
#    data <- readCtData(c("GSM1361812.tsv", "GSM1361813.tsv",
#                         "GSM1361814.tsv", "GSM1361814.tsv"),
#                       n.features=18690, column.info=list(feature=1, Ct=2))
#    sampleNames(data) <- c("A", "B", "C", "D")
#




gene-expression.tsv:Sjulia: GSM1361812.tsv GSM1361813.tsv GSM1361814.tsv GSM1361815.tsv
    using DataFrames, DataStructures

    samples = [("A", "GSM1361812"), ("B", "GSM1361813"),
               ("C", "GSM1361814"), ("D", "GSM1361815")]

    alldata = nothing
    for (sample, accession) in samples
        data = readtable(string(accession, ".tsv"), header=true, separator='\t')
        data[:value] = 2.0 .^ -data[:value]

        expr = DefaultDict(() -> 0.0)
        count = DefaultDict(() -> 0)

        for (feature, value) in zip(data[:gene_id], data[:value])
            count[feature] += 1
            expr[feature] += value
        end

        for feature in keys(expr)
            expr[feature] /= count[feature]
        end

        data = DataFrame(gene_id=collect(keys(expr)),
                         value=collect(Float64, values(expr)))
        names!(data, [:gene_id, symbol(sample)])
        if alldata === nothing
            alldata = copy(data)
        else
            alldata = join(alldata, data, on=:gene_id)
        end
    end

    writetable("$target", alldata, separator='\t')



