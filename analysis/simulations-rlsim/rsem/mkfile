

<../../mkconfig

gene_results= \
       1.1.1.genes.results \
       1.1.2.genes.results \
       1.1.3.genes.results \
       1.2.1.genes.results \
       1.2.2.genes.results \
       1.2.3.genes.results

isoform_results= \
       1.1.1.isoforms.results \
       1.1.2.isoforms.results \
       1.1.3.isoforms.results \
       1.2.1.isoforms.results \
       1.2.2.isoforms.results \
       1.2.3.isoforms.results

all:V: $gene_results

# Remove anything that doesn't have a transcript_id, since rsem chokes
# on that stuff.
ref.gtf: $human_genes
    grep transcript_id $prereq > $target


ref.1.bt2: $human_genome ref.gtf
    $rsem_prepare_reference \
        --bowtie2 \
        --bowtie2-path $bowtie2path \
        --gtf ref.gtf \
        $human_genome \
        ref

%.genes.results:X: ../%.transcriptome.bam
    $time -f "$TIMEFMT" -o $stem.time.log -- \
    $rsem_calculate_expression \
        --bam \
        --paired-end \
        --num-threads 8 \
        --calc-pme \
        --no-bam-output \
        $prereq ref $stem


gene-expression.tsv:S$julia: $gene_results
    using DataFrames

    joined = nothing
    for filename in split("$gene_results")
        sample = symbol(replace(filename, ".genes.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(gene_id=ex[:gene_id])
        df[sample] = ex[:TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:gene_id)
        end
    end

    writetable("$target", joined, separator='\t')

pm-transcript-expression.tsv:S$julia: $gene_results
    using DataFrames

    joined = nothing
    for filename in split("$isoform_results")
        sample = symbol(replace(filename, ".isoforms.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(transcript_id=ex[:transcript_id])
        df[sample] = ex[:pme_TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:transcript_id)
        end
    end

    writetable("$target", joined, separator='\t')


ml-transcript-expression.tsv:S$julia: $gene_results
    using DataFrames

    joined = nothing
    for filename in split("$isoform_results")
        sample = symbol(replace(filename, ".isoforms.results", ""))
        ex = readtable(filename, separator='\t', header=true)

        df = DataFrame(transcript_id=ex[:transcript_id])
        df[sample] = ex[:TPM]

        if joined === nothing
            joined = df
        else
            joined = join(joined, df, on=:transcript_id)
        end
    end

    writetable("$target", joined, separator='\t')

