
<mkconfig

# Assumed total number of RNA in the "cell"
N=100000000

clean:V:
    rm -f *.tsv *.pro *.par *.fastq *.bam *.bed

genes.gtf: $genes
    # remove anything without a transcript_id or in a "non-standard" sequence
    cat $genes | grep -P "^[\dMXY]" | grep transcript_id > $target

# split the fasta file, for fluxsim's benifit
genome/1.fa:Spython: $genome
    import os
    import re
    os.mkdir("genome")

    pat = re.compile(r"^>(\S+)")
    out = None
    for line in open("$genome"):
        mat = pat.match(line)
        if mat is not None:
            out = open("genome/{0}.fa".format(mat.group(1)), "w")
        out.write(line)


1.tsv:
    ./seqsim-generate.jl $genes \
        0.59 -8.38 4.56 \
        0.41  0.83 2.09 \
        > $target

1.par.m4: fluxsim.par.m4
    m4 \
        -D_REF_FILE_NAME=genes.gtf \
        -D_GEN_DIR=genome \
        -D_READ_NUMBER=50000000 \
        -D_READ_LENGTH=76 \
        -D_PAIRED_END=TRUE \
        -D_FASTA=TRUE \
        -D_ERR_FILE=76 \
        -D_TSS_MEAN=NaN \
        -D_POLYA_SCALE=NaN \
        -D_POLYA_SHAPE=NaN \
        $prereq > $target

1.(\d+).tsv:R: 1.tsv
    ./seqsim-perturb.jl $prereq \
        0.23 0.0 0.60 \
        0.77 0.0 0.23 \
        > $target

1.(\d+).(\d+).tsv:R: 1.$stem1.tsv
    ./seqsim-perturb.jl $prereq \
        0.22 -0.02 0.42 \
        0.78  0.01 0.12 \
        > $target


# The format of the expression files generated for fluxsim are not documented.
# So I let it generate one of these files then substitute in the values that I
# want. Flux simulator is kind of a piece of shit, but it's still the best I can
# find.
%.pro:X: %.tsv %.par genes.gtf
    mkdir -p $stem-fluxsim-tmp
    $fluxsim --threads=8 -xp $stem.par
    ./seqsim-to-fluxsim.jl $stem.tsv $target $N

(\d+).(\d+).(\d+).par:R: $stem1.par.m4
    m4 \
        -D_PRO_FILE_NAME=$stem1.$stem2.$stem3.pro \
        -D_TMP_DIR=`pwd`/$stem1.$stem2.$stem3-fluxsim-tmp \
        $prereq > $target

(\d+).(\d+).(\d+).lib:R: $stem1.$stem2.$stem3.par $stem1.$stem2.$stem3.pro
    mkdir -p ${stem1}.${stem2}.${stem3}-fluxsim-tmp
    $fluxsim \
        --threads=8 \
        -lp \
        $stem1.$stem2.$stem3.par
    rm -r ${stem1}.${stem2}.${stem3}-fluxsim-tmp


(\d+).(\d+).(\d+).fastq:R: $stem1.$stem2.$stem3.par # $stem1.$stem2.$stem3.lib
    mkdir -p ${stem1}.${stem2}.${stem3}-fluxsim-tmp
    $fluxsim \
        --threads=8 \
        -sp \
        $stem1.$stem2.$stem3.par
    rm -r ${stem1}.${stem2}.${stem3}-fluxsim-tmp


split-fastq/split-fastq:
    cd split-fastq
    make

# Split paired end reads into usable form
%_1.fastq: %.fastq split-fastq/split-fastq
    read_length=`grep READ_LENGTH $stem.par | grep -oP '\d+'`
    split-fastq/split-fastq $read_length $stem.fastq

%.unsorted.bam:X: %_1.fastq
    STAR \
        --genomeDir ../data/star-hs37d5-ens75 \
        --readFilesIn ${stem}_1.fastq ${stem}_2.fastq \
        --runThreadN 8 \
        --outStd SAM \
        --outSAMstrandField intronMotif \
        | samtools view -@8 -S -b - > $target


%.bam:X: %.unsorted.bam
    samtools sort -m 20G $prereq $stem


# Run the experiment:
ex1:V: 1.1.1.bam 1.1.2.bam 1.1.3.bam \
       1.2.1.bam 1.2.2.bam 1.2.3.bam


gene_ids.tsv:
    mkfifo gene_ids.fifo
    grep transcript_id $genes \
        | grep -oP 'gene_id\s+"[^"]+"' \
        | sed 's/gene_id //' | sed 's/"//g' \
        > gene_ids.fifo &

    mkfifo transcript_ids.fifo
    grep transcript_id $genes \
        | grep -oP 'transcript_id\s+"[^"]+"' \
        | sed 's/transcript_id //' | sed 's/"//g' \
        > transcript_ids.fifo &

    paste gene_ids.fifo transcript_ids.fifo | sort -u > $target
    rm gene_ids.fifo transcript_ids.fifo


isolator/(\d+).(\d+).(\d+)-transcript-expression.tsv:
    cd isolator
    mk $stem1.$stem2.$stem3-transcript-expression.tsv


(\d+).(\d+).(\d+)-transcript-expression.tsv:RSR --vanilla: \
        isolator/$stem1.$stem2.$stem3-transcript-expression.tsv \
        cufflinks/$stem1.$stem2.$stem3-transcript-expression.tsv

    #ground_truth <- read.table("1.1.1.pro", header=FALSE, sep='\t')
    #ground_truth <- ground_truth[,c(2,5)]
    #names(ground_truth) <-c ("transcript_id", "truth")
    #ground_truth$truth <- as.double(as.character(ground_truth$truth))
    #ground_truth$truth <- ground_truth$truth / sum(ground_truth$truth)

    ground_truth <- read.table("$stem1.$stem2.$stem3.tsv",
                               header=TRUE, sep='\t',
                               colClasses=c("character", "double"))
    names(ground_truth) <- c("transcript_id", "truth")
    ground_truth$truth <- ground_truth$truth / sum(ground_truth$truth)

    # Isolator
    isolator <- read.table("isolator/$stem1.$stem2.$stem3-transcript-expression.tsv", header=TRUE, sep='\t')
    isolator <- isolator[,c(3, 4)]
    names(isolator) <- c("transcript_id", "isolator")
    isolator\$isolator <- isolator\$isolator / sum(isolator\$isolator)
    merged <- merge(ground_truth, isolator, by="transcript_id")

    # Cufflinks
    cufflinks <- read.table("cufflinks/$stem1.$stem2.$stem3-transcript-expression.tsv", header=TRUE, sep='\t')
    names(cufflinks) <- c("transcript_id", "cufflinks")
    cufflinks$cufflinks <- cufflinks$cufflinks / sum(cufflinks$cufflinks)
    merged <- merge(merged, cufflinks, by="transcript_id")

    write.table(merged, "$target", row.names=FALSE, sep='\t')


(\d+).(\d+).(\d+)-gene-expression.tsv:RSR --vanilla: \
        gene_ids.tsv \
        isolator/$stem1.$stem2.$stem3-gene-expression.tsv \
        cufflinks/$stem1.$stem2.$stem3-gene-expression.tsv

    ground_truth <- read.table("$stem1.$stem2.$stem3.tsv",
                               header=TRUE, sep='\t',
                               colClasses=c("character", "double"))
    names(ground_truth) <- c("transcript_id", "truth")

    gene_ids <- read.table("gene_ids.tsv", header=FALSE, sep='\t')
    names(gene_ids) <- c("gene_id", "transcript_id")
    ground_truth <- merge(gene_ids, ground_truth, by="transcript_id")
    ground_truth$truth <- ground_truth$truth / sum(ground_truth$truth)

    ground_truth <- tapply(ground_truth$truth, INDEX=ground_truth$gene_id, FUN=sum)
    ground_truth <- as.data.frame(cbind(names(ground_truth), ground_truth))
    row.names(ground_truth) <- NULL
    names(ground_truth) <- c("gene_id", "truth")
    ground_truth$truth <- as.double(as.character(ground_truth$truth))
    print(head(ground_truth))

    # Isolator
    isolator <- read.table("isolator/$stem1.$stem2.$stem3-gene-expression.tsv", header=TRUE, sep='\t')
    isolator <- isolator[,c(2, 4)]
    names(isolator) <- c("gene_id", "isolator")
    isolator\$isolator <- isolator\$isolator / sum(isolator\$isolator)
    merged <- merge(ground_truth, isolator, by="gene_id")

    # Cufflinks
    cufflinks <- read.table("cufflinks/$stem1.$stem2.$stem3-gene-expression.tsv", header=TRUE, sep='\t')
    names(cufflinks) <- c("gene_id", "cufflinks")
    cufflinks$cufflinks <- cufflinks$cufflinks / sum(cufflinks$cufflinks)
    merged <- merge(merged, cufflinks, by="gene_id")

    write.table(merged, "$target", row.names=FALSE, sep='\t')


(\d+).(\d+).(\d+)-gene-correlation.tsv:RSR --vanilla: \
        $stem1.$stem2.$stem3-gene-expression.tsv

    expr <- read.table("$prereq", header=TRUE, sep="\t")


    #expr <- subset(expr, truth < 1e-9)
    #expr <- subset(expr, !(truth < 1e-7 & truth > 1e-15))
    #expr <- subset(expr, truth > 1e-7)
    #expr\$isolator[expr\$cufflinks == 0 &
                   #expr\$truth < 1e-9 &
                   #expr\$isolator > 1e-9] <- 0.0
    #expr\$isolator[expr\$isolator < 1e-9] <- 0.0

    manhattan <- function(us, vs) {
        sum(abs(us - vs))
    }

    euclidean <- function(us, vs) {
        sqrt(sum((us - vs) ^ 2))
    }

    measure <- function(method) {
        row <- data.frame(
            method,
            manhattan(expr$truth, expr[method]),
            euclidean(expr$truth, expr[method]),
            cor(expr$truth, expr[method], method="pearson"),
            cor(expr$truth, expr[method], method="spearman"))
        names(row) <- c("method", "manhattan", "euclidean", "pearson", "spearman")
        return(row)
    }

    df <- rbind(measure("isolator"),
                measure("cufflinks"))
    print(df)
    write.table(df, "$target", sep='\t', row.names=F, col.names=T)



(\d+).(\d+).(\d+)-transcript-correlation.tsv:RSR --vanilla: \
        $stem1.$stem2.$stem3-transcript-expression.tsv

    expr <- read.table("$prereq", header=TRUE, sep="\t")

    #expr <- subset(expr, truth > 1e-7)

    #tlens <- read.table("1.1.1.pro", header=FALSE, sep='\t')
    #tlens <- tlens[,c(2,4)]
    #names(tlens) <- c("transcript_id", "tlen")
    #expr <- merge(expr, tlens, by="transcript_id")
    #expr <- subset(expr, tlen > 2000)

    manhattan <- function(us, vs) {
        sum(abs(us - vs))
    }

    euclidean <- function(us, vs) {
        sqrt(sum((us - vs) ^ 2))
    }

    measure <- function(method) {
        row <- data.frame(
            method,
            manhattan(expr$truth, expr[method]),
            euclidean(expr$truth, expr[method]),
            cor(expr$truth, expr[method], method="pearson"),
            cor(expr$truth, expr[method], method="spearman"))
        names(row) <- c("method", "manhattan", "euclidean", "pearson", "spearman")
        return(row)
    }

    print(head(expr))

    df <- rbind(measure("isolator"),
                measure("cufflinks"))
    print(df)
    write.table(df, "$target", sep='\t', row.names=F, col.names=T)



