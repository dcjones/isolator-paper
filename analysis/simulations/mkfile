
<../mkconfig

# Assumed total number of RNA in the "cell"
N=5000000

clean:V:
    rm -f *.tsv *.pro *.par *.fastq *.bam *.bed

genes.gtf: $human_genes
    # remove anything without a transcript_id or in a "non-standard" sequence
    cat $human_genes | grep -P "^[\dMXY]" | grep transcript_id > $target

# split the fasta file, for fluxsim's benifit
genome/1.fa:Spython: $human_genome
    import os
    import re
    os.mkdir("genome")

    pat = re.compile(r"^>(\S+)")
    out = None
    for line in open("$human_genome"):
        mat = pat.match(line)
        if mat is not None:
            out = open("genome/{0}.fa".format(mat.group(1)), "w")
        out.write(line)


expression:V: 1.1.1.tsv 1.1.2.tsv 1.1.3.tsv \
              1.2.1.tsv 1.2.2.tsv 1.2.3.tsv

1.tsv:
    $julia seqsim-generate.jl $human_genes \
        0.59 -8.38 4.56 \
        0.41  0.83 2.09 \
        > $target

1.(\d+).tsv:R: 1.tsv
    $julia seqsim-perturb.jl $prereq \
        0.23 0.0 0.60 \
        0.77 0.0 0.23 \
        > $target

1.(\d+).(\d+).tsv:R: 1.$stem1.tsv
    $julia seqsim-perturb.jl $prereq \
        0.22 -0.02 0.42 \
        0.78  0.01 0.12 \
        > $target


fastq:V: 1.1.1_1.fastq 1.1.2_1.fastq 1.1.3_1.fastq \
         1.2.1_1.fastq 1.2.2_1.fastq 1.2.3_1.fastq

# The format of the expression files generated for fluxsim are not documented.
# So I let it generate one of these files then substitute in the values that I
# want. Flux simulator is kind of a piece of shit, but it's still the best I can
# find.
%.pro:X: %.tsv %.par genes.gtf genome/1.fa
    mkdir -p $stem-fluxsim-tmp
    $fluxsimulator --threads=8 -xp $stem.par
    $julia seqsim-to-fluxsim.jl $stem.tsv $target $N

(\d+).(\d+).(\d+).par:R: $stem1.par.m4
    m4 \
        -D_PRO_FILE_NAME=$stem1.$stem2.$stem3.pro \
        -D_TMP_DIR=`pwd`/$stem1.$stem2.$stem3-fluxsim-tmp \
        $prereq > $target

(\d+).(\d+).(\d+).lib:XR: $stem1.$stem2.$stem3.par $stem1.$stem2.$stem3.pro genome/1.fa
    mkdir -p ${stem1}.${stem2}.${stem3}-fluxsim-tmp
    FLUX_MEM=20G $fluxsimulator \
        --threads=8 \
        -lp \
        $stem1.$stem2.$stem3.par
    rm -r ${stem1}.${stem2}.${stem3}-fluxsim-tmp


(\d+).(\d+).(\d+).fastq:XR: $stem1.$stem2.$stem3.par $stem1.$stem2.$stem3.lib
    mkdir -p ${stem1}.${stem2}.${stem3}-fluxsim-tmp
    FLUX_MEM=30G $fluxsimulator \
        --threads=8 \
        -sp \
        $stem1.$stem2.$stem3.par
    rm -r ${stem1}.${stem2}.${stem3}-fluxsim-tmp


split-fastq/split-fastq:
    cd split-fastq
    make

# Split paired end reads into usable form
%_1.fastq: %.fastq split-fastq/split-fastq
    read_length=`grep READ_LENGTH $stem.par | grep -oP '\d+'`
    split-fastq/split-fastq $read_length $stem.fastq


transcripts.1.ebwt: genes.gtf $human_genome
    $gffread -w transcripts.fa -g $human_genome genes.gtf
    $bowtiebuild -f -o2 -t 12 --ntoa transcripts.fa transcripts


%.transcripts.unsorted.bam:X: transcripts.1.ebwt %_1.fastq
    mkfifo ${stem}_1.fastq.fifo
    pv ${stem}_1.fastq > ${stem}_1.fastq.fifo &

    mkfifo ${stem}_2.fastq.fifo
    cat ${stem}_2.fastq > ${stem}_2.fastq.fifo &

    $bowtie \
        --trim3 0 --trim5 0 --all -m 200 --threads 8 --sam \
        -1 ${stem}_1.fastq.fifo -2 ${stem}_2.fastq.fifo transcripts \
            2> /dev/null | $samtools view -hSb - > $target

    rm ${stem}_1.fastq.fifo ${stem}_2.fastq.fifo


align:V: 1.1.1.bam \
         1.1.2.bam \
         1.1.3.bam \
         1.2.1.bam \
         1.2.2.bam \
         1.2.3.bam


genome.header.sam:S$julia: $human_genome
    using Bio.Seq

    output = open("$target", "w")
    println(output "@HD\tVN:1.0\tSO:unsorted")

    parser = FASTAParser("$human_genome")
    seqrec = Seq.FASTADNASeqRecord()
    while read!(parser, seqrec)
        println(output, "@SQ\tSN:", seqrec.name, "\tLN:", length(seqrec.seq))
    end


(\d+).(\d+).(\d+).bam:XR: $stem1.$stem2.$stem3.transcripts.unsorted.bam genome.header.sam
    stem=$stem1.$stem2.$stem3
    mkfifo ${stem}-input.sam.fifo
    mkfifo ${stem}-output.sam.fifo
    mkfifo ${stem}-unsorted.bam.fifo

    pv ${stem}.transcripts.unsorted.bam | samtools view - > ${stem}-input.sam.fifo &

    sort -T `pwd` --compress-program=gzip -k1,6 -u -S 15G  ${stem}-output.sam.fifo \
        | cat genome.header.sam - \
        | $samtools view -Shub - > ${stem}-unsorted.bam.fifo &

    $julia --check-bounds=no ./unpack-transcript-alignments.jl genes.gtf ${stem}-input.sam.fifo \
        ${stem}-output.sam.fifo

    $samtools sort -m 15G $stem-unsorted.bam.fifo $stem

    rm ${stem}-input.sam.fifo
    rm ${stem}-output.sam.fifo
    rm ${stem}-unsorted.bam.fifo


#%.unsorted.bam:X: %_1.fastq
#    STAR \
#        --genomeDir ../data/star-hs37d5-ens75 \
#        --readFilesIn ${stem}_1.fastq ${stem}_2.fastq \
#        --runThreadN 8 \
#        --outStd SAM \
#        --outSAMstrandField intronMotif \
#        | samtools view -@8 -S -b - > $target


# Run the experiment:
ex1:V: 1.1.1.bam 1.1.2.bam 1.1.3.bam \
       1.2.1.bam 1.2.2.bam 1.2.3.bam


gene_ids.tsv:
    mkfifo gene_ids.fifo
    grep transcript_id $genes \
        | grep -oP 'gene_id\s+"[^"]+"' \
        | sed 's/gene_id //' | sed 's/"//g' \
        > gene_ids.fifo &

    mkfifo transcript_ids.fifo
    grep transcript_id $genes \
        | grep -oP 'transcript_id\s+"[^"]+"' \
        | sed 's/transcript_id //' | sed 's/"//g' \
        > transcript_ids.fifo &

    paste gene_ids.fifo transcript_ids.fifo | sort -u > $target
    rm gene_ids.fifo transcript_ids.fifo


isolator/(\d+).(\d+).(\d+)-transcript-expression.tsv:
    cd isolator
    mk $stem1.$stem2.$stem3-transcript-expression.tsv


(\d+).(\d+).(\d+)-transcript-expression.tsv:RSR --vanilla: \
        isolator/$stem1.$stem2.$stem3-transcript-expression.tsv \
        cufflinks/$stem1.$stem2.$stem3-transcript-expression.tsv \
        rsem/$stem1.$stem2.$stem3-transcript-expression.tsv \

    #ground_truth <- read.table("1.1.1.pro", header=FALSE, sep='\t')
    #ground_truth <- ground_truth[,c(2,5)]
    #names(ground_truth) <-c ("transcript_id", "truth")
    #ground_truth$truth <- as.double(as.character(ground_truth$truth))
    #ground_truth$truth <- ground_truth$truth / sum(ground_truth$truth)

    ground_truth <- read.table("$stem1.$stem2.$stem3.tsv",
                               header=TRUE, sep='\t',
                               colClasses=c("character", "double"))
    names(ground_truth) <- c("transcript_id", "truth")
    ground_truth$truth <- ground_truth$truth / sum(ground_truth$truth)

    # Isolator
    isolator <- read.table("isolator/$stem1.$stem2.$stem3-transcript-expression.tsv", header=TRUE, sep='\t')
    isolator <- isolator[,c(3, 4)]
    names(isolator) <- c("transcript_id", "isolator")
    isolator\$isolator <- isolator\$isolator / sum(isolator\$isolator)
    merged <- merge(ground_truth, isolator, by="transcript_id")

    # Cufflinks
    cufflinks <- read.table("cufflinks/$stem1.$stem2.$stem3-transcript-expression.tsv", header=TRUE, sep='\t')
    names(cufflinks) <- c("transcript_id", "cufflinks")
    cufflinks$cufflinks <- cufflinks$cufflinks / sum(cufflinks$cufflinks)
    merged <- merge(merged, cufflinks, by="transcript_id")

    # RSEM
    rsem <- read.table("rsem/$stem1.$stem2.$stem3-transcript-expression.tsv", header=TRUE, sep='\t')
    rsem <- rsem[,c("transcript_id", "TPM")]
    names(rsem) <- c("transcript_id", "rsem")
    merged <- merge(merged, rsem, by="transcript_id", al.x=T, all.y=F)
    merged\$rsem <- merged\$rsem / sum(merged\$rsem)

    write.table(merged, "$target", row.names=FALSE, sep='\t')


(\d+).(\d+).(\d+)-gene-expression.tsv:RSR --vanilla: \
        gene_ids.tsv \
        isolator/$stem1.$stem2.$stem3-gene-expression.tsv \
        cufflinks/$stem1.$stem2.$stem3-gene-expression.tsv \
        rsem/$stem1.$stem2.$stem3-gene-expression.tsv \
        bitseq/$stem1.$stem2.$stem3-gene-expression.tsv

    ground_truth <- read.table("$stem1.$stem2.$stem3.tsv",
                               header=TRUE, sep='\t',
                               colClasses=c("character", "double"))
    names(ground_truth) <- c("transcript_id", "truth")

    gene_ids <- read.table("gene_ids.tsv", header=FALSE, sep='\t')
    names(gene_ids) <- c("gene_id", "transcript_id")
    ground_truth <- merge(gene_ids, ground_truth, by="transcript_id")
    ground_truth$truth <- ground_truth$truth / sum(ground_truth$truth)

    ground_truth <- tapply(ground_truth$truth, INDEX=ground_truth$gene_id, FUN=sum)
    ground_truth <- as.data.frame(cbind(names(ground_truth), ground_truth))
    row.names(ground_truth) <- NULL
    names(ground_truth) <- c("gene_id", "truth")
    ground_truth$truth <- as.double(as.character(ground_truth$truth))
    print(head(ground_truth))

    # Isolator
    isolator <- read.table("isolator/$stem1.$stem2.$stem3-gene-expression.tsv", header=TRUE, sep='\t')
    isolator <- isolator[,c(2, 4)]
    names(isolator) <- c("gene_id", "isolator")
    isolator\$isolator <- isolator\$isolator / sum(isolator\$isolator)
    merged <- merge(ground_truth, isolator, by="gene_id")

    # Cufflinks
    cufflinks <- read.table("cufflinks/$stem1.$stem2.$stem3-gene-expression.tsv", header=TRUE, sep='\t')
    names(cufflinks) <- c("gene_id", "cufflinks")
    cufflinks$cufflinks <- cufflinks$cufflinks / sum(cufflinks$cufflinks)
    merged <- merge(merged, cufflinks, by="gene_id")

    # RSEM
    rsem <- read.table("rsem/$stem1.$stem2.$stem3-gene-expression.tsv", header=TRUE, sep='\t')
    rsem <- rsem[,c("gene_id", "TPM")]
    names(rsem) <- c("gene_id", "rsem")
    merged <- merge(merged, rsem, by="gene_id", al.x=T, all.y=F)
    merged\$rsem <- merged\$rsem / sum(merged\$rsem)

    # BitSeq
    bitseq <- read.table("bitseq/$stem1.$stem2.$stem3-gene-expression.tsv",
                         header=TRUE, sep='\t')
    bitseq <- bitseq[,c("gene_id", "posterior_mean")]
    bitseq <- tapply(bitseq\$posterior_mean, bitseq\$gene_id, sum)
    bitseq <- as.data.frame(cbind(row.names(bitseq), bitseq))
    names(bitseq) <- c("gene_id", "bitseq")
    row.names(bitseq) <- NULL
    merged <- merge(merged, bitseq, by=c("gene_id"), all.x=T, all.y=F)
    merged\$bitseq <- as.numeric(as.character(merged\$bitseq))
    merged\$bitseq <- merged\$bitseq / sum(merged\$bitseq)


    write.table(merged, "$target", row.names=FALSE, sep='\t')


(\d+).(\d+).(\d+)-gene-correlation.tsv:RSR --vanilla: \
        $stem1.$stem2.$stem3-gene-expression.tsv

    expr <- read.table("$prereq", header=TRUE, sep="\t")

    #expr <- subset(expr, truth > 1e-2)

    manhattan <- function(us, vs) {
        sum(abs(us - vs))
    }

    euclidean <- function(us, vs) {
        sqrt(sum((us - vs) ^ 2))
    }

    measure <- function(method) {
        row <- data.frame(
            method,
            manhattan(expr$truth, expr[method]),
            euclidean(expr$truth, expr[method]),
            cor(expr$truth, expr[method], method="pearson"),
            cor(expr$truth, expr[method], method="spearman"))
        names(row) <- c("method", "manhattan", "euclidean", "pearson", "spearman")
        return(row)
    }

    df <- rbind(measure("isolator"),
                measure("cufflinks"),
                measure("rsem"),
                measure("bitseq"))
    print(df)
    write.table(df, "$target", sep='\t', row.names=F, col.names=T)



(\d+).(\d+).(\d+)-transcript-correlation.tsv:RSR --vanilla: \
        $stem1.$stem2.$stem3-transcript-expression.tsv

    expr <- read.table("$prereq", header=TRUE, sep="\t")

    manhattan <- function(us, vs) {
        sum(abs(us - vs))
    }

    euclidean <- function(us, vs) {
        sqrt(sum((us - vs) ^ 2))
    }

    measure <- function(method) {
        row <- data.frame(
            method,
            manhattan(expr$truth, expr[method]),
            euclidean(expr$truth, expr[method]),
            cor(expr$truth, expr[method], method="pearson"),
            cor(expr$truth, expr[method], method="spearman"))
        names(row) <- c("method", "manhattan", "euclidean", "pearson", "spearman")
        return(row)
    }

    print(head(expr))

    df <- rbind(measure("isolator"),
                measure("cufflinks"),
                measure("rsem"))
    #df <- measure("isolator")
    print(df)
    write.table(df, "$target", sep='\t', row.names=F, col.names=T)


%.bedGraph: %.bam
    bamToBedGraph $prereq \
     | grep -P '^(X|Y|\d+)\t' \
     | sed 's/^/chr/' > $target

%.bw: %.bedGraph
    bedGraphToBigWig $prereq /home/dcjones/data/homo_sapiens/hg19.chromSizes $target


(\d+).(\d+).(\d+)-gene-error.tsv:RSR --vanilla: \
        $stem1.$stem2.$stem3-gene-expression.tsv

    expr <- read.table("$prereq", header=TRUE, sep="\t")
    error <- data.frame(
        gene_id = expr$gene_id,
        truth   = expr$truth,
        isolator_error = abs(expr\$isolator - expr\$truth),
        cufflinks_error = abs(expr\$cufflinks - expr\$truth),
        rsem_error = abs(expr\$rsem - expr\$truth),
        bitseq_error = abs(expr\$bitseq - expr\$truth)
    )

    write.table(error, "$target", sep='\t', row.names=F, col.names=T)

